/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SimpleEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "amount"
      | "arbiter"
      | "buyer"
      | "confirmDelivery"
      | "currentState"
      | "depositFunds"
      | "disputed"
      | "fundsDeposited"
      | "fundsReleased"
      | "getBalance"
      | "getContractDetails"
      | "raiseDispute"
      | "requestRelease"
      | "resolveDispute"
      | "seller"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DisputeRaised"
      | "DisputeResolved"
      | "FundsDeposited"
      | "FundsReleased"
  ): EventFragment;

  encodeFunctionData(functionFragment: "amount", values?: undefined): string;
  encodeFunctionData(functionFragment: "arbiter", values?: undefined): string;
  encodeFunctionData(functionFragment: "buyer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "confirmDelivery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositFunds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "disputed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundsDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundsReleased",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raiseDispute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestRelease",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "seller", values?: undefined): string;

  decodeFunctionResult(functionFragment: "amount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "arbiter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmDelivery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disputed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundsDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundsReleased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raiseDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seller", data: BytesLike): Result;
}

export namespace DisputeRaisedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisputeResolvedEvent {
  export type InputTuple = [winner: AddressLike];
  export type OutputTuple = [winner: string];
  export interface OutputObject {
    winner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsDepositedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsReleasedEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SimpleEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): SimpleEscrow;
  waitForDeployment(): Promise<this>;

  interface: SimpleEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  amount: TypedContractMethod<[], [bigint], "view">;

  arbiter: TypedContractMethod<[], [string], "view">;

  buyer: TypedContractMethod<[], [string], "view">;

  confirmDelivery: TypedContractMethod<[], [void], "nonpayable">;

  currentState: TypedContractMethod<[], [bigint], "view">;

  depositFunds: TypedContractMethod<[], [void], "payable">;

  disputed: TypedContractMethod<[], [boolean], "view">;

  fundsDeposited: TypedContractMethod<[], [boolean], "view">;

  fundsReleased: TypedContractMethod<[], [boolean], "view">;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getContractDetails: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, bigint, boolean] & {
        _buyer: string;
        _seller: string;
        _arbiter: string;
        _amount: bigint;
        _state: bigint;
        _disputed: boolean;
      }
    ],
    "view"
  >;

  raiseDispute: TypedContractMethod<[], [void], "nonpayable">;

  requestRelease: TypedContractMethod<[], [void], "nonpayable">;

  resolveDispute: TypedContractMethod<
    [winner: AddressLike],
    [void],
    "nonpayable"
  >;

  seller: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "amount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "arbiter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "buyer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "confirmDelivery"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentState"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositFunds"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "disputed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "fundsDeposited"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "fundsReleased"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getContractDetails"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, bigint, boolean] & {
        _buyer: string;
        _seller: string;
        _arbiter: string;
        _amount: bigint;
        _state: bigint;
        _disputed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "raiseDispute"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestRelease"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<[winner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "seller"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "DisputeRaised"
  ): TypedContractEvent<
    DisputeRaisedEvent.InputTuple,
    DisputeRaisedEvent.OutputTuple,
    DisputeRaisedEvent.OutputObject
  >;
  getEvent(
    key: "DisputeResolved"
  ): TypedContractEvent<
    DisputeResolvedEvent.InputTuple,
    DisputeResolvedEvent.OutputTuple,
    DisputeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "FundsDeposited"
  ): TypedContractEvent<
    FundsDepositedEvent.InputTuple,
    FundsDepositedEvent.OutputTuple,
    FundsDepositedEvent.OutputObject
  >;
  getEvent(
    key: "FundsReleased"
  ): TypedContractEvent<
    FundsReleasedEvent.InputTuple,
    FundsReleasedEvent.OutputTuple,
    FundsReleasedEvent.OutputObject
  >;

  filters: {
    "DisputeRaised()": TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;
    DisputeRaised: TypedContractEvent<
      DisputeRaisedEvent.InputTuple,
      DisputeRaisedEvent.OutputTuple,
      DisputeRaisedEvent.OutputObject
    >;

    "DisputeResolved(address)": TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;
    DisputeResolved: TypedContractEvent<
      DisputeResolvedEvent.InputTuple,
      DisputeResolvedEvent.OutputTuple,
      DisputeResolvedEvent.OutputObject
    >;

    "FundsDeposited(uint256)": TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;
    FundsDeposited: TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;

    "FundsReleased(address,uint256)": TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;
    FundsReleased: TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;
  };
}
