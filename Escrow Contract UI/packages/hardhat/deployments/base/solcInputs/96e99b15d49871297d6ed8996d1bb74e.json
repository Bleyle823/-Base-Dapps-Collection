{
  "language": "Solidity",
  "sources": {
    "contracts/SimpleEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ncontract SimpleEscrow {\n    address public buyer;\n    address public seller;\n    address public arbiter;\n    uint256 public amount;\n    bool public fundsDeposited;\n    bool public fundsReleased;\n    bool public disputed;\n    \n    enum State { AWAITING_PAYMENT, AWAITING_DELIVERY, COMPLETE, DISPUTED }\n    State public currentState;\n    \n    event FundsDeposited(uint256 amount);\n    event FundsReleased(address to, uint256 amount);\n    event DisputeRaised();\n    event DisputeResolved(address winner);\n    \n    modifier onlyBuyer() {\n        require(msg.sender == buyer, \"Only buyer can call this\");\n        _;\n    }\n    \n    modifier onlySeller() {\n        require(msg.sender == seller, \"Only seller can call this\");\n        _;\n    }\n    \n    modifier onlyArbiter() {\n        require(msg.sender == arbiter, \"Only arbiter can call this\");\n        _;\n    }\n    \n    modifier inState(State _state) {\n        require(currentState == _state, \"Invalid state for this action\");\n        _;\n    }\n    \n    constructor(address _seller, address _arbiter) {\n        buyer = msg.sender;\n        seller = _seller;\n        arbiter = _arbiter;\n        currentState = State.AWAITING_PAYMENT;\n    }\n    \n    // Buyer deposits funds into escrow\n    function depositFunds() external payable onlyBuyer inState(State.AWAITING_PAYMENT) {\n        require(msg.value > 0, \"Must deposit some funds\");\n        amount = msg.value;\n        fundsDeposited = true;\n        currentState = State.AWAITING_DELIVERY;\n        emit FundsDeposited(msg.value);\n    }\n    \n    // Buyer confirms delivery and releases funds to seller\n    function confirmDelivery() external onlyBuyer inState(State.AWAITING_DELIVERY) {\n        _releaseFunds(seller);\n    }\n    \n    // Seller can request release (buyer still needs to confirm)\n    function requestRelease() external onlySeller inState(State.AWAITING_DELIVERY) {\n        // This could trigger a notification to buyer\n        // For now, it's just a placeholder for future functionality\n    }\n    \n    // Either party can raise a dispute\n    function raiseDispute() external inState(State.AWAITING_DELIVERY) {\n        require(msg.sender == buyer || msg.sender == seller, \"Only buyer or seller can raise dispute\");\n        disputed = true;\n        currentState = State.DISPUTED;\n        emit DisputeRaised();\n    }\n    \n    // Arbiter resolves dispute by awarding funds to either buyer or seller\n    function resolveDispute(address winner) external onlyArbiter inState(State.DISPUTED) {\n        require(winner == buyer || winner == seller, \"Winner must be buyer or seller\");\n        _releaseFunds(winner);\n        emit DisputeResolved(winner);\n    }\n    \n    // Internal function to release funds\n    function _releaseFunds(address recipient) internal {\n        require(fundsDeposited && !fundsReleased, \"Funds not available for release\");\n        fundsReleased = true;\n        currentState = State.COMPLETE;\n        \n        uint256 payout = amount;\n        amount = 0;\n        \n        payable(recipient).transfer(payout);\n        emit FundsReleased(recipient, payout);\n    }\n    \n    // Get contract balance\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n    \n    // Get contract details\n    function getContractDetails() external view returns (\n        address _buyer,\n        address _seller, \n        address _arbiter,\n        uint256 _amount,\n        State _state,\n        bool _disputed\n    ) {\n        return (buyer, seller, arbiter, amount, currentState, disputed);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}