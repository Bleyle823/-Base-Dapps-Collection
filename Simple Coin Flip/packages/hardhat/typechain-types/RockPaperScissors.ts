/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RockPaperScissorsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_BET"
      | "MIN_BET"
      | "REVEAL_TIMEOUT"
      | "claimTimeoutPrize"
      | "createGame"
      | "games"
      | "generateCommitment"
      | "getGame"
      | "getOpenGames"
      | "getPlatformStats"
      | "getPlayerGames"
      | "getPlayerStats"
      | "joinGame"
      | "nextGameId"
      | "platformBalance"
      | "platformFee"
      | "platformOwner"
      | "playerGames"
      | "playerStats"
      | "revealChoice"
      | "totalGames"
      | "totalVolume"
      | "transferOwnership"
      | "updatePlatformFee"
      | "withdrawPlatformFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChoiceRevealed"
      | "CommitmentMade"
      | "GameCreated"
      | "GameFinished"
      | "PlayerJoined"
      | "PrizeClaimed"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MAX_BET", values?: undefined): string;
  encodeFunctionData(functionFragment: "MIN_BET", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REVEAL_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimTimeoutPrize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "games", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "generateCommitment",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenGames",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerGames",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextGameId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "playerGames",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "playerStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revealChoice",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalGames",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVolume",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPlatformFees",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "MAX_BET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_BET", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REVEAL_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTimeoutPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOpenGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextGameId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealChoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalGames", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPlatformFees",
    data: BytesLike
  ): Result;
}

export namespace ChoiceRevealedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    player: AddressLike,
    choice: BigNumberish
  ];
  export type OutputTuple = [gameId: bigint, player: string, choice: bigint];
  export interface OutputObject {
    gameId: bigint;
    player: string;
    choice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommitmentMadeEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    player: AddressLike,
    commitment: BytesLike
  ];
  export type OutputTuple = [
    gameId: bigint,
    player: string,
    commitment: string
  ];
  export interface OutputObject {
    gameId: bigint;
    player: string;
    commitment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameCreatedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    player1: AddressLike,
    betAmount: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    player1: string,
    betAmount: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    player1: string;
    betAmount: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameFinishedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    winner: AddressLike,
    player1Choice: BigNumberish,
    player2Choice: BigNumberish,
    prize: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    winner: string,
    player1Choice: bigint,
    player2Choice: bigint,
    prize: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    winner: string;
    player1Choice: bigint;
    player2Choice: bigint;
    prize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerJoinedEvent {
  export type InputTuple = [gameId: BigNumberish, player2: AddressLike];
  export type OutputTuple = [gameId: bigint, player2: string];
  export interface OutputObject {
    gameId: bigint;
    player2: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrizeClaimedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    winner: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [gameId: bigint, winner: string, amount: bigint];
  export interface OutputObject {
    gameId: bigint;
    winner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RockPaperScissors extends BaseContract {
  connect(runner?: ContractRunner | null): RockPaperScissors;
  waitForDeployment(): Promise<this>;

  interface: RockPaperScissorsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_BET: TypedContractMethod<[], [bigint], "view">;

  MIN_BET: TypedContractMethod<[], [bigint], "view">;

  REVEAL_TIMEOUT: TypedContractMethod<[], [bigint], "view">;

  claimTimeoutPrize: TypedContractMethod<
    [_gameId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createGame: TypedContractMethod<
    [_commitment: BytesLike],
    [bigint],
    "payable"
  >;

  games: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        boolean
      ] & {
        player1: string;
        player2: string;
        betAmount: bigint;
        player1Commitment: string;
        player2Commitment: string;
        player1Choice: bigint;
        player2Choice: bigint;
        state: bigint;
        winner: string;
        createdAt: bigint;
        deadline: bigint;
        prizeClaimed: boolean;
      }
    ],
    "view"
  >;

  generateCommitment: TypedContractMethod<
    [_choice: BigNumberish, _nonce: BigNumberish, _player: AddressLike],
    [string],
    "view"
  >;

  getGame: TypedContractMethod<
    [_gameId: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        boolean
      ] & {
        player1: string;
        player2: string;
        betAmount: bigint;
        state: bigint;
        player1Choice: bigint;
        player2Choice: bigint;
        winner: string;
        deadline: bigint;
        prizeClaimed: boolean;
      }
    ],
    "view"
  >;

  getOpenGames: TypedContractMethod<
    [_start: BigNumberish, _limit: BigNumberish],
    [bigint[]],
    "view"
  >;

  getPlatformStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        _totalGames: bigint;
        _totalVolume: bigint;
        _platformFee: bigint;
        _platformBalance: bigint;
      }
    ],
    "view"
  >;

  getPlayerGames: TypedContractMethod<
    [_player: AddressLike],
    [bigint[]],
    "view"
  >;

  getPlayerStats: TypedContractMethod<[_player: AddressLike], [bigint], "view">;

  joinGame: TypedContractMethod<
    [_gameId: BigNumberish, _commitment: BytesLike],
    [void],
    "payable"
  >;

  nextGameId: TypedContractMethod<[], [bigint], "view">;

  platformBalance: TypedContractMethod<[], [bigint], "view">;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  platformOwner: TypedContractMethod<[], [string], "view">;

  playerGames: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  playerStats: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  revealChoice: TypedContractMethod<
    [_gameId: BigNumberish, _choice: BigNumberish, _nonce: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalGames: TypedContractMethod<[], [bigint], "view">;

  totalVolume: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePlatformFee: TypedContractMethod<
    [_newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawPlatformFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_BET"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_BET"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REVEAL_TIMEOUT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimTimeoutPrize"
  ): TypedContractMethod<[_gameId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createGame"
  ): TypedContractMethod<[_commitment: BytesLike], [bigint], "payable">;
  getFunction(
    nameOrSignature: "games"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        boolean
      ] & {
        player1: string;
        player2: string;
        betAmount: bigint;
        player1Commitment: string;
        player2Commitment: string;
        player1Choice: bigint;
        player2Choice: bigint;
        state: bigint;
        winner: string;
        createdAt: bigint;
        deadline: bigint;
        prizeClaimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "generateCommitment"
  ): TypedContractMethod<
    [_choice: BigNumberish, _nonce: BigNumberish, _player: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGame"
  ): TypedContractMethod<
    [_gameId: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        boolean
      ] & {
        player1: string;
        player2: string;
        betAmount: bigint;
        state: bigint;
        player1Choice: bigint;
        player2Choice: bigint;
        winner: string;
        deadline: bigint;
        prizeClaimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOpenGames"
  ): TypedContractMethod<
    [_start: BigNumberish, _limit: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlatformStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        _totalGames: bigint;
        _totalVolume: bigint;
        _platformFee: bigint;
        _platformBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerGames"
  ): TypedContractMethod<[_player: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPlayerStats"
  ): TypedContractMethod<[_player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "joinGame"
  ): TypedContractMethod<
    [_gameId: BigNumberish, _commitment: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "nextGameId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "playerGames"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "playerStats"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "revealChoice"
  ): TypedContractMethod<
    [_gameId: BigNumberish, _choice: BigNumberish, _nonce: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalGames"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVolume"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePlatformFee"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawPlatformFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ChoiceRevealed"
  ): TypedContractEvent<
    ChoiceRevealedEvent.InputTuple,
    ChoiceRevealedEvent.OutputTuple,
    ChoiceRevealedEvent.OutputObject
  >;
  getEvent(
    key: "CommitmentMade"
  ): TypedContractEvent<
    CommitmentMadeEvent.InputTuple,
    CommitmentMadeEvent.OutputTuple,
    CommitmentMadeEvent.OutputObject
  >;
  getEvent(
    key: "GameCreated"
  ): TypedContractEvent<
    GameCreatedEvent.InputTuple,
    GameCreatedEvent.OutputTuple,
    GameCreatedEvent.OutputObject
  >;
  getEvent(
    key: "GameFinished"
  ): TypedContractEvent<
    GameFinishedEvent.InputTuple,
    GameFinishedEvent.OutputTuple,
    GameFinishedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerJoined"
  ): TypedContractEvent<
    PlayerJoinedEvent.InputTuple,
    PlayerJoinedEvent.OutputTuple,
    PlayerJoinedEvent.OutputObject
  >;
  getEvent(
    key: "PrizeClaimed"
  ): TypedContractEvent<
    PrizeClaimedEvent.InputTuple,
    PrizeClaimedEvent.OutputTuple,
    PrizeClaimedEvent.OutputObject
  >;

  filters: {
    "ChoiceRevealed(uint256,address,uint8)": TypedContractEvent<
      ChoiceRevealedEvent.InputTuple,
      ChoiceRevealedEvent.OutputTuple,
      ChoiceRevealedEvent.OutputObject
    >;
    ChoiceRevealed: TypedContractEvent<
      ChoiceRevealedEvent.InputTuple,
      ChoiceRevealedEvent.OutputTuple,
      ChoiceRevealedEvent.OutputObject
    >;

    "CommitmentMade(uint256,address,bytes32)": TypedContractEvent<
      CommitmentMadeEvent.InputTuple,
      CommitmentMadeEvent.OutputTuple,
      CommitmentMadeEvent.OutputObject
    >;
    CommitmentMade: TypedContractEvent<
      CommitmentMadeEvent.InputTuple,
      CommitmentMadeEvent.OutputTuple,
      CommitmentMadeEvent.OutputObject
    >;

    "GameCreated(uint256,address,uint256,uint256)": TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;
    GameCreated: TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;

    "GameFinished(uint256,address,uint8,uint8,uint256)": TypedContractEvent<
      GameFinishedEvent.InputTuple,
      GameFinishedEvent.OutputTuple,
      GameFinishedEvent.OutputObject
    >;
    GameFinished: TypedContractEvent<
      GameFinishedEvent.InputTuple,
      GameFinishedEvent.OutputTuple,
      GameFinishedEvent.OutputObject
    >;

    "PlayerJoined(uint256,address)": TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
    PlayerJoined: TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;

    "PrizeClaimed(uint256,address,uint256)": TypedContractEvent<
      PrizeClaimedEvent.InputTuple,
      PrizeClaimedEvent.OutputTuple,
      PrizeClaimedEvent.OutputObject
    >;
    PrizeClaimed: TypedContractEvent<
      PrizeClaimedEvent.InputTuple,
      PrizeClaimedEvent.OutputTuple,
      PrizeClaimedEvent.OutputObject
    >;
  };
}
