/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RandomPacketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizedCreators"
      | "callbackGasLimit"
      | "cancelExpiredPacket"
      | "commitForPacket"
      | "commitRevealData"
      | "commitRevealWindow"
      | "createETHPacket"
      | "createMixedPacket"
      | "createTokenPacket"
      | "defaultExpiryTime"
      | "emergencyWithdraw"
      | "fulfillRandomWords"
      | "getPacket"
      | "getUserPackets"
      | "keyHash"
      | "nextPacketId"
      | "openPacket"
      | "openPacketWithVRF"
      | "owner"
      | "packets"
      | "requestConfirmations"
      | "revealAndOpen"
      | "setAuthorizedCreator"
      | "setDefaultExpiryTime"
      | "setVRFParameters"
      | "subscriptionId"
      | "userPackets"
      | "vrfCoordinator"
      | "vrfRequestToPacket"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PacketCreated"
      | "PacketOpened"
      | "RandomnessFulfilled"
      | "RandomnessRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizedCreators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelExpiredPacket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitForPacket",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commitRevealData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitRevealWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createETHPacket",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createMixedPacket",
    values: [BigNumberish[], BigNumberish[], AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createTokenPacket",
    values: [AddressLike, BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultExpiryTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPacket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPackets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "keyHash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextPacketId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPacket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openPacketWithVRF",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "packets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestConfirmations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealAndOpen",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedCreator",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultExpiryTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVRFParameters",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userPackets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vrfCoordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrfRequestToPacket",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizedCreators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelExpiredPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitForPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitRevealData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitRevealWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createETHPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMixedPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTokenPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultExpiryTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPacket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserPackets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keyHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextPacketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openPacket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openPacketWithVRF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "packets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealAndOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultExpiryTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVRFParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPackets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfRequestToPacket",
    data: BytesLike
  ): Result;
}

export namespace PacketCreatedEvent {
  export type InputTuple = [
    packetId: BigNumberish,
    creator: AddressLike,
    totalValue: BigNumberish
  ];
  export type OutputTuple = [
    packetId: bigint,
    creator: string,
    totalValue: bigint
  ];
  export interface OutputObject {
    packetId: bigint;
    creator: string;
    totalValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PacketOpenedEvent {
  export type InputTuple = [
    packetId: BigNumberish,
    opener: AddressLike,
    reward: BigNumberish,
    rewardType: BigNumberish
  ];
  export type OutputTuple = [
    packetId: bigint,
    opener: string,
    reward: bigint,
    rewardType: bigint
  ];
  export interface OutputObject {
    packetId: bigint;
    opener: string;
    reward: bigint;
    rewardType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessFulfilledEvent {
  export type InputTuple = [requestId: BigNumberish, randomValue: BigNumberish];
  export type OutputTuple = [requestId: bigint, randomValue: bigint];
  export interface OutputObject {
    requestId: bigint;
    randomValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessRequestedEvent {
  export type InputTuple = [requestId: BigNumberish, packetId: BigNumberish];
  export type OutputTuple = [requestId: bigint, packetId: bigint];
  export interface OutputObject {
    requestId: bigint;
    packetId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RandomPacket extends BaseContract {
  connect(runner?: ContractRunner | null): RandomPacket;
  waitForDeployment(): Promise<this>;

  interface: RandomPacketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizedCreators: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  callbackGasLimit: TypedContractMethod<[], [bigint], "view">;

  cancelExpiredPacket: TypedContractMethod<
    [_packetId: BigNumberish],
    [void],
    "nonpayable"
  >;

  commitForPacket: TypedContractMethod<
    [_packetId: BigNumberish, _commitment: BytesLike],
    [void],
    "nonpayable"
  >;

  commitRevealData: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, bigint] & {
        commitment: string;
        revealDeadline: bigint;
        revealed: boolean;
        nonce: bigint;
      }
    ],
    "view"
  >;

  commitRevealWindow: TypedContractMethod<[], [bigint], "view">;

  createETHPacket: TypedContractMethod<
    [_numRewards: BigNumberish, _rewardAmounts: BigNumberish[]],
    [bigint],
    "payable"
  >;

  createMixedPacket: TypedContractMethod<
    [
      _rewardTypes: BigNumberish[],
      _rewardAmounts: BigNumberish[],
      _tokenAddresses: AddressLike[],
      _nftIds: BigNumberish[]
    ],
    [bigint],
    "payable"
  >;

  createTokenPacket: TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _rewardAmounts: BigNumberish[],
      _useVRF: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  defaultExpiryTime: TypedContractMethod<[], [bigint], "view">;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  fulfillRandomWords: TypedContractMethod<
    [_requestId: BigNumberish, _randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getPacket: TypedContractMethod<
    [_packetId: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        creator: string;
        totalValue: bigint;
        createdAt: bigint;
        expiresAt: bigint;
        status: bigint;
        rewardCount: bigint;
      }
    ],
    "view"
  >;

  getUserPackets: TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;

  keyHash: TypedContractMethod<[], [string], "view">;

  nextPacketId: TypedContractMethod<[], [bigint], "view">;

  openPacket: TypedContractMethod<
    [_packetId: BigNumberish],
    [void],
    "nonpayable"
  >;

  openPacketWithVRF: TypedContractMethod<
    [_packetId: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  packets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, boolean, bigint] & {
        creator: string;
        totalValue: bigint;
        createdAt: bigint;
        expiresAt: bigint;
        status: bigint;
        randomnessSource: bigint;
        requiresVRF: boolean;
        vrfRequestId: bigint;
      }
    ],
    "view"
  >;

  requestConfirmations: TypedContractMethod<[], [bigint], "view">;

  revealAndOpen: TypedContractMethod<
    [_packetId: BigNumberish, _nonce: BigNumberish, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAuthorizedCreator: TypedContractMethod<
    [_creator: AddressLike, _authorized: boolean],
    [void],
    "nonpayable"
  >;

  setDefaultExpiryTime: TypedContractMethod<
    [_expiryTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVRFParameters: TypedContractMethod<
    [
      _keyHash: BytesLike,
      _subscriptionId: BigNumberish,
      _requestConfirmations: BigNumberish,
      _callbackGasLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  subscriptionId: TypedContractMethod<[], [bigint], "view">;

  userPackets: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  vrfCoordinator: TypedContractMethod<[], [string], "view">;

  vrfRequestToPacket: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizedCreators"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "callbackGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelExpiredPacket"
  ): TypedContractMethod<[_packetId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "commitForPacket"
  ): TypedContractMethod<
    [_packetId: BigNumberish, _commitment: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "commitRevealData"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, bigint] & {
        commitment: string;
        revealDeadline: bigint;
        revealed: boolean;
        nonce: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "commitRevealWindow"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createETHPacket"
  ): TypedContractMethod<
    [_numRewards: BigNumberish, _rewardAmounts: BigNumberish[]],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createMixedPacket"
  ): TypedContractMethod<
    [
      _rewardTypes: BigNumberish[],
      _rewardAmounts: BigNumberish[],
      _tokenAddresses: AddressLike[],
      _nftIds: BigNumberish[]
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createTokenPacket"
  ): TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _rewardAmounts: BigNumberish[],
      _useVRF: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "defaultExpiryTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fulfillRandomWords"
  ): TypedContractMethod<
    [_requestId: BigNumberish, _randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPacket"
  ): TypedContractMethod<
    [_packetId: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        creator: string;
        totalValue: bigint;
        createdAt: bigint;
        expiresAt: bigint;
        status: bigint;
        rewardCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserPackets"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "keyHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextPacketId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "openPacket"
  ): TypedContractMethod<[_packetId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "openPacketWithVRF"
  ): TypedContractMethod<[_packetId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "packets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, boolean, bigint] & {
        creator: string;
        totalValue: bigint;
        createdAt: bigint;
        expiresAt: bigint;
        status: bigint;
        randomnessSource: bigint;
        requiresVRF: boolean;
        vrfRequestId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "requestConfirmations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "revealAndOpen"
  ): TypedContractMethod<
    [_packetId: BigNumberish, _nonce: BigNumberish, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedCreator"
  ): TypedContractMethod<
    [_creator: AddressLike, _authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultExpiryTime"
  ): TypedContractMethod<[_expiryTime: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVRFParameters"
  ): TypedContractMethod<
    [
      _keyHash: BytesLike,
      _subscriptionId: BigNumberish,
      _requestConfirmations: BigNumberish,
      _callbackGasLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subscriptionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userPackets"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "vrfCoordinator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vrfRequestToPacket"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getEvent(
    key: "PacketCreated"
  ): TypedContractEvent<
    PacketCreatedEvent.InputTuple,
    PacketCreatedEvent.OutputTuple,
    PacketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PacketOpened"
  ): TypedContractEvent<
    PacketOpenedEvent.InputTuple,
    PacketOpenedEvent.OutputTuple,
    PacketOpenedEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessFulfilled"
  ): TypedContractEvent<
    RandomnessFulfilledEvent.InputTuple,
    RandomnessFulfilledEvent.OutputTuple,
    RandomnessFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessRequested"
  ): TypedContractEvent<
    RandomnessRequestedEvent.InputTuple,
    RandomnessRequestedEvent.OutputTuple,
    RandomnessRequestedEvent.OutputObject
  >;

  filters: {
    "PacketCreated(uint256,address,uint256)": TypedContractEvent<
      PacketCreatedEvent.InputTuple,
      PacketCreatedEvent.OutputTuple,
      PacketCreatedEvent.OutputObject
    >;
    PacketCreated: TypedContractEvent<
      PacketCreatedEvent.InputTuple,
      PacketCreatedEvent.OutputTuple,
      PacketCreatedEvent.OutputObject
    >;

    "PacketOpened(uint256,address,uint256,uint8)": TypedContractEvent<
      PacketOpenedEvent.InputTuple,
      PacketOpenedEvent.OutputTuple,
      PacketOpenedEvent.OutputObject
    >;
    PacketOpened: TypedContractEvent<
      PacketOpenedEvent.InputTuple,
      PacketOpenedEvent.OutputTuple,
      PacketOpenedEvent.OutputObject
    >;

    "RandomnessFulfilled(uint256,uint256)": TypedContractEvent<
      RandomnessFulfilledEvent.InputTuple,
      RandomnessFulfilledEvent.OutputTuple,
      RandomnessFulfilledEvent.OutputObject
    >;
    RandomnessFulfilled: TypedContractEvent<
      RandomnessFulfilledEvent.InputTuple,
      RandomnessFulfilledEvent.OutputTuple,
      RandomnessFulfilledEvent.OutputObject
    >;

    "RandomnessRequested(uint256,uint256)": TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;
    RandomnessRequested: TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;
  };
}
