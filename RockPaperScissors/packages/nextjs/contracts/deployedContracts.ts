/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  8453: {
    RockPaperScissors: {
      address: "0xe2fcD718EaFDb5FE14Bea19D6B395b365c4CC7c6",
      abi: [
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [],
          name: "GameExpired",
          type: "error",
        },
        {
          inputs: [],
          name: "GameNotInCommitPhase",
          type: "error",
        },
        {
          inputs: [],
          name: "GameNotInRevealPhase",
          type: "error",
        },
        {
          inputs: [],
          name: "GameNotOpen",
          type: "error",
        },
        {
          inputs: [],
          name: "InvalidBetAmount",
          type: "error",
        },
        {
          inputs: [],
          name: "InvalidChoice",
          type: "error",
        },
        {
          inputs: [],
          name: "InvalidCommitment",
          type: "error",
        },
        {
          inputs: [],
          name: "NotGamePlayer",
          type: "error",
        },
        {
          inputs: [],
          name: "PlayerAlreadyInGame",
          type: "error",
        },
        {
          inputs: [],
          name: "PrizeAlreadyClaimed",
          type: "error",
        },
        {
          inputs: [],
          name: "RevealTimeoutNotReached",
          type: "error",
        },
        {
          inputs: [],
          name: "TransferFailed",
          type: "error",
        },
        {
          inputs: [],
          name: "UnauthorizedAccess",
          type: "error",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "gameId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "address",
              name: "player",
              type: "address",
            },
            {
              indexed: false,
              internalType: "enum RockPaperScissors.Choice",
              name: "choice",
              type: "uint8",
            },
          ],
          name: "ChoiceRevealed",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "gameId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "address",
              name: "player",
              type: "address",
            },
            {
              indexed: false,
              internalType: "bytes32",
              name: "commitment",
              type: "bytes32",
            },
          ],
          name: "CommitmentMade",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "gameId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "address",
              name: "player1",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "betAmount",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "deadline",
              type: "uint256",
            },
          ],
          name: "GameCreated",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "gameId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "address",
              name: "winner",
              type: "address",
            },
            {
              indexed: false,
              internalType: "enum RockPaperScissors.Choice",
              name: "player1Choice",
              type: "uint8",
            },
            {
              indexed: false,
              internalType: "enum RockPaperScissors.Choice",
              name: "player2Choice",
              type: "uint8",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "prize",
              type: "uint256",
            },
          ],
          name: "GameFinished",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "gameId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "address",
              name: "player2",
              type: "address",
            },
          ],
          name: "PlayerJoined",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "uint256",
              name: "gameId",
              type: "uint256",
            },
            {
              indexed: true,
              internalType: "address",
              name: "winner",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "PrizeClaimed",
          type: "event",
        },
        {
          inputs: [],
          name: "MAX_BET",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "MIN_BET",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "REVEAL_TIMEOUT",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_gameId",
              type: "uint256",
            },
          ],
          name: "claimTimeoutPrize",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "_commitment",
              type: "bytes32",
            },
          ],
          name: "createGame",
          outputs: [
            {
              internalType: "uint256",
              name: "gameId",
              type: "uint256",
            },
          ],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "games",
          outputs: [
            {
              internalType: "address",
              name: "player1",
              type: "address",
            },
            {
              internalType: "address",
              name: "player2",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "betAmount",
              type: "uint256",
            },
            {
              internalType: "bytes32",
              name: "player1Commitment",
              type: "bytes32",
            },
            {
              internalType: "bytes32",
              name: "player2Commitment",
              type: "bytes32",
            },
            {
              internalType: "enum RockPaperScissors.Choice",
              name: "player1Choice",
              type: "uint8",
            },
            {
              internalType: "enum RockPaperScissors.Choice",
              name: "player2Choice",
              type: "uint8",
            },
            {
              internalType: "enum RockPaperScissors.GameState",
              name: "state",
              type: "uint8",
            },
            {
              internalType: "address",
              name: "winner",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "createdAt",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "deadline",
              type: "uint256",
            },
            {
              internalType: "bool",
              name: "prizeClaimed",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "enum RockPaperScissors.Choice",
              name: "_choice",
              type: "uint8",
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256",
            },
            {
              internalType: "address",
              name: "_player",
              type: "address",
            },
          ],
          name: "generateCommitment",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
          stateMutability: "pure",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_gameId",
              type: "uint256",
            },
          ],
          name: "getGame",
          outputs: [
            {
              internalType: "address",
              name: "player1",
              type: "address",
            },
            {
              internalType: "address",
              name: "player2",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "betAmount",
              type: "uint256",
            },
            {
              internalType: "enum RockPaperScissors.GameState",
              name: "state",
              type: "uint8",
            },
            {
              internalType: "enum RockPaperScissors.Choice",
              name: "player1Choice",
              type: "uint8",
            },
            {
              internalType: "enum RockPaperScissors.Choice",
              name: "player2Choice",
              type: "uint8",
            },
            {
              internalType: "address",
              name: "winner",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "deadline",
              type: "uint256",
            },
            {
              internalType: "bool",
              name: "prizeClaimed",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_start",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "_limit",
              type: "uint256",
            },
          ],
          name: "getOpenGames",
          outputs: [
            {
              internalType: "uint256[]",
              name: "openGames",
              type: "uint256[]",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "getPlatformStats",
          outputs: [
            {
              internalType: "uint256",
              name: "_totalGames",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "_totalVolume",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "_platformFee",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "_platformBalance",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_player",
              type: "address",
            },
          ],
          name: "getPlayerGames",
          outputs: [
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_player",
              type: "address",
            },
          ],
          name: "getPlayerStats",
          outputs: [
            {
              internalType: "uint256",
              name: "wins",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_gameId",
              type: "uint256",
            },
            {
              internalType: "bytes32",
              name: "_commitment",
              type: "bytes32",
            },
          ],
          name: "joinGame",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [],
          name: "nextGameId",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "platformBalance",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "platformFee",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "platformOwner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          name: "playerGames",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          name: "playerStats",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_gameId",
              type: "uint256",
            },
            {
              internalType: "enum RockPaperScissors.Choice",
              name: "_choice",
              type: "uint8",
            },
            {
              internalType: "uint256",
              name: "_nonce",
              type: "uint256",
            },
          ],
          name: "revealChoice",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "totalGames",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "totalVolume",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_newOwner",
              type: "address",
            },
          ],
          name: "transferOwnership",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_newFee",
              type: "uint256",
            },
          ],
          name: "updatePlatformFee",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "withdrawPlatformFees",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {},
      deployedOnBlock: 33641722,
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
