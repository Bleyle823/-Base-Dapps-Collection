{
  "address": "0x0A708C4aB7ef649f9d0B80fd64cD59259ca012B8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "packetId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalValue",
          "type": "uint256"
        }
      ],
      "name": "PacketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "packetId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "opener",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum RandomPacket.RewardType",
          "name": "rewardType",
          "type": "uint8"
        }
      ],
      "name": "PacketOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomValue",
          "type": "uint256"
        }
      ],
      "name": "RandomnessFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "packetId",
          "type": "uint256"
        }
      ],
      "name": "RandomnessRequested",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedCreators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_packetId",
          "type": "uint256"
        }
      ],
      "name": "cancelExpiredPacket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_packetId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        }
      ],
      "name": "commitForPacket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "commitRevealData",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "revealDeadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "revealed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitRevealWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "createETHPacket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum RandomPacket.RewardType[]",
          "name": "_rewardTypes",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_nftIds",
          "type": "uint256[]"
        }
      ],
      "name": "createMixedPacket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "_useVRF",
          "type": "bool"
        }
      ],
      "name": "createTokenPacket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultExpiryTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "fulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_packetId",
          "type": "uint256"
        }
      ],
      "name": "getPacket",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiresAt",
          "type": "uint256"
        },
        {
          "internalType": "enum RandomPacket.PacketStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "rewardCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserPackets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextPacketId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_packetId",
          "type": "uint256"
        }
      ],
      "name": "openPacket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_packetId",
          "type": "uint256"
        }
      ],
      "name": "openPacketWithVRF",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "packets",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiresAt",
          "type": "uint256"
        },
        {
          "internalType": "enum RandomPacket.PacketStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "enum RandomPacket.RandomnessSource",
          "name": "randomnessSource",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "requiresVRF",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "vrfRequestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_packetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "revealAndOpen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_authorized",
          "type": "bool"
        }
      ],
      "name": "setAuthorizedCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_expiryTime",
          "type": "uint256"
        }
      ],
      "name": "setDefaultExpiryTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "_requestConfirmations",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        }
      ],
      "name": "setVRFParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userPackets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vrfRequestToPacket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2ddf70505f5432bbeb369613378d5f3da8c86d08dbbe4024e0d76100f544ea4f",
  "receipt": {
    "to": null,
    "from": "0x231CdF6d31BF1D106DFA88b702B00E4b900628AD",
    "contractAddress": "0x0A708C4aB7ef649f9d0B80fd64cD59259ca012B8",
    "transactionIndex": 234,
    "gasUsed": "2357182",
    "logsBloom": "0x
    "blockHash": "0x644650d4a0edf503ba09595705360f95c4cafcb8e6edfa9e14c383339de3993a",
    "transactionHash": "0x2ddf70505f5432bbeb369613378d5f3da8c86d08dbbe4024e0d76100f544ea4f",
    "logs": [],
    "blockNumber": 33385969,
    "cumulativeGasUsed": "57029650",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    0
  ],
  "numDeployments": 1,
  "solcInputHash": "b3191725d7aea824b40ec7714ddb4dc0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"packetId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"}],\"name\":\"PacketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"packetId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"opener\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum RandomPacket.RewardType\",\"name\":\"rewardType\",\"type\":\"uint8\"}],\"name\":\"PacketOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomValue\",\"type\":\"uint256\"}],\"name\":\"RandomnessFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"packetId\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedCreators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packetId\",\"type\":\"uint256\"}],\"name\":\"cancelExpiredPacket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packetId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"}],\"name\":\"commitForPacket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commitRevealData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"revealDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitRevealWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardAmounts\",\"type\":\"uint256[]\"}],\"name\":\"createETHPacket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RandomPacket.RewardType[]\",\"name\":\"_rewardTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_nftIds\",\"type\":\"uint256[]\"}],\"name\":\"createMixedPacket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_useVRF\",\"type\":\"bool\"}],\"name\":\"createTokenPacket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultExpiryTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_randomWords\",\"type\":\"uint256[]\"}],\"name\":\"fulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packetId\",\"type\":\"uint256\"}],\"name\":\"getPacket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"enum RandomPacket.PacketStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"rewardCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPackets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPacketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packetId\",\"type\":\"uint256\"}],\"name\":\"openPacket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packetId\",\"type\":\"uint256\"}],\"name\":\"openPacketWithVRF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"enum RandomPacket.PacketStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum RandomPacket.RandomnessSource\",\"name\":\"randomnessSource\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"requiresVRF\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"vrfRequestId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"revealAndOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_authorized\",\"type\":\"bool\"}],\"name\":\"setAuthorizedCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expiryTime\",\"type\":\"uint256\"}],\"name\":\"setDefaultExpiryTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"setVRFParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPackets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vrfRequestToPacket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"A smart contract for creating random packets with various reward types Supports multiple randomness sources and packet types\",\"kind\":\"dev\",\"methods\":{\"cancelExpiredPacket(uint256)\":{\"details\":\"Cancel an expired packet and refund creator\"},\"commitForPacket(uint256,bytes32)\":{\"details\":\"Commit phase for commit-reveal randomness\"},\"createETHPacket(uint256,uint256[])\":{\"details\":\"Create a simple ETH packet with block hash randomness\"},\"createMixedPacket(uint8[],uint256[],address[],uint256[])\":{\"details\":\"Create a mixed packet with commit-reveal randomness\"},\"createTokenPacket(address,uint256[],bool)\":{\"details\":\"Create a token packet with VRF randomness\"},\"emergencyWithdraw()\":{\"details\":\"Emergency withdrawal function\"},\"fulfillRandomWords(uint256,uint256[])\":{\"details\":\"Chainlink VRF callback\"},\"getPacket(uint256)\":{\"details\":\"Get packet details\"},\"getUserPackets(address)\":{\"details\":\"Get user's packets\"},\"openPacket(uint256)\":{\"details\":\"Open a packet using block hash randomness\"},\"openPacketWithVRF(uint256)\":{\"details\":\"Open packet with VRF randomness\"},\"revealAndOpen(uint256,uint256,uint256)\":{\"details\":\"Reveal phase for commit-reveal randomness\"},\"setAuthorizedCreator(address,bool)\":{\"details\":\"Admin functions\"}},\"title\":\"RandomPacket\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RandomPacket.sol\":\"RandomPacket\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RandomPacket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IERC20 {\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\ninterface VRFCoordinatorV2Interface {\\n    function requestRandomWords(\\n        bytes32 keyHash,\\n        uint64 subId,\\n        uint16 minimumRequestConfirmations,\\n        uint32 callbackGasLimit,\\n        uint32 numWords\\n    ) external returns (uint256 requestId);\\n}\\n\\ninterface VRFConsumerBaseV2Interface {\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external;\\n}\\n\\n/**\\n * @title RandomPacket\\n * @dev A smart contract for creating random packets with various reward types\\n * Supports multiple randomness sources and packet types\\n */\\ncontract RandomPacket {\\n    \\n    // Events\\n    event PacketCreated(uint256 indexed packetId, address indexed creator, uint256 totalValue);\\n    event PacketOpened(uint256 indexed packetId, address indexed opener, uint256 reward, RewardType rewardType);\\n    event RandomnessRequested(uint256 indexed requestId, uint256 indexed packetId);\\n    event RandomnessFulfilled(uint256 indexed requestId, uint256 randomValue);\\n    \\n    // Enums\\n    enum PacketStatus { Active, Opened, Expired, Cancelled }\\n    enum RewardType { ETH, Token, NFT, Empty }\\n    enum RandomnessSource { BlockHash, VRF, CommitReveal }\\n    \\n    // Structs\\n    struct Packet {\\n        address creator;\\n        uint256 totalValue;\\n        uint256 createdAt;\\n        uint256 expiresAt;\\n        PacketStatus status;\\n        RewardType[] rewardTypes;\\n        uint256[] rewardAmounts;\\n        address[] tokenAddresses;\\n        uint256[] nftIds;\\n        RandomnessSource randomnessSource;\\n        bool requiresVRF;\\n        uint256 vrfRequestId;\\n    }\\n    \\n    struct CommitRevealData {\\n        bytes32 commitment;\\n        uint256 revealDeadline;\\n        bool revealed;\\n        uint256 nonce;\\n    }\\n    \\n    // State variables\\n    mapping(uint256 => Packet) public packets;\\n    mapping(uint256 => CommitRevealData) public commitRevealData;\\n    mapping(uint256 => uint256) public vrfRequestToPacket;\\n    mapping(address => uint256[]) public userPackets;\\n    \\n    uint256 public nextPacketId = 1;\\n    uint256 public defaultExpiryTime = 7 days;\\n    uint256 public commitRevealWindow = 1 hours;\\n    \\n    // VRF variables (Chainlink VRF V2)\\n    VRFCoordinatorV2Interface public vrfCoordinator;\\n    bytes32 public keyHash;\\n    uint64 public subscriptionId;\\n    uint16 public requestConfirmations = 3;\\n    uint32 public callbackGasLimit = 100000;\\n    \\n    // Access control\\n    address public owner;\\n    mapping(address => bool) public authorizedCreators;\\n    \\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Not owner\\\");\\n        _;\\n    }\\n    \\n    modifier onlyAuthorized() {\\n        require(authorizedCreators[msg.sender] || msg.sender == owner, \\\"Not authorized\\\");\\n        _;\\n    }\\n    \\n    constructor(\\n        address _vrfCoordinator,\\n        bytes32 _keyHash,\\n        uint64 _subscriptionId\\n    ) {\\n        owner = msg.sender;\\n        authorizedCreators[msg.sender] = true;\\n        vrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinator);\\n        keyHash = _keyHash;\\n        subscriptionId = _subscriptionId;\\n    }\\n    \\n    /**\\n     * @dev Create a simple ETH packet with block hash randomness\\n     */\\n    function createETHPacket(\\n        uint256 _numRewards,\\n        uint256[] memory _rewardAmounts\\n    ) external payable returns (uint256) {\\n        require(_numRewards > 0 && _numRewards <= 10, \\\"Invalid reward count\\\");\\n        require(_rewardAmounts.length == _numRewards, \\\"Mismatched arrays\\\");\\n        \\n        uint256 totalValue = 0;\\n        for (uint i = 0; i < _rewardAmounts.length; i++) {\\n            totalValue += _rewardAmounts[i];\\n        }\\n        require(msg.value >= totalValue, \\\"Insufficient ETH sent\\\");\\n        \\n        RewardType[] memory rewardTypes = new RewardType[](_numRewards);\\n        for (uint i = 0; i < _numRewards; i++) {\\n            rewardTypes[i] = RewardType.ETH;\\n        }\\n        \\n        uint256 packetId = _createPacket(\\n            totalValue,\\n            rewardTypes,\\n            _rewardAmounts,\\n            new address[](_numRewards),\\n            new uint256[](_numRewards),\\n            RandomnessSource.BlockHash\\n        );\\n        \\n        return packetId;\\n    }\\n    \\n    /**\\n     * @dev Create a token packet with VRF randomness\\n     */\\n    function createTokenPacket(\\n        address _tokenAddress,\\n        uint256[] memory _rewardAmounts,\\n        bool _useVRF\\n    ) external returns (uint256) {\\n        require(_rewardAmounts.length > 0 && _rewardAmounts.length <= 10, \\\"Invalid reward count\\\");\\n        \\n        uint256 totalValue = 0;\\n        for (uint i = 0; i < _rewardAmounts.length; i++) {\\n            totalValue += _rewardAmounts[i];\\n        }\\n        \\n        IERC20 token = IERC20(_tokenAddress);\\n        require(token.transferFrom(msg.sender, address(this), totalValue), \\\"Token transfer failed\\\");\\n        \\n        RewardType[] memory rewardTypes = new RewardType[](_rewardAmounts.length);\\n        address[] memory tokenAddresses = new address[](_rewardAmounts.length);\\n        \\n        for (uint i = 0; i < _rewardAmounts.length; i++) {\\n            rewardTypes[i] = RewardType.Token;\\n            tokenAddresses[i] = _tokenAddress;\\n        }\\n        \\n        uint256 packetId = _createPacket(\\n            totalValue,\\n            rewardTypes,\\n            _rewardAmounts,\\n            tokenAddresses,\\n            new uint256[](_rewardAmounts.length),\\n            _useVRF ? RandomnessSource.VRF : RandomnessSource.BlockHash\\n        );\\n        \\n        return packetId;\\n    }\\n    \\n    /**\\n     * @dev Create a mixed packet with commit-reveal randomness\\n     */\\n    function createMixedPacket(\\n        RewardType[] memory _rewardTypes,\\n        uint256[] memory _rewardAmounts,\\n        address[] memory _tokenAddresses,\\n        uint256[] memory _nftIds\\n    ) external payable returns (uint256) {\\n        require(_rewardTypes.length > 0 && _rewardTypes.length <= 10, \\\"Invalid reward count\\\");\\n        require(_rewardTypes.length == _rewardAmounts.length, \\\"Mismatched arrays\\\");\\n        \\n        uint256 ethValue = 0;\\n        for (uint i = 0; i < _rewardTypes.length; i++) {\\n            if (_rewardTypes[i] == RewardType.ETH) {\\n                ethValue += _rewardAmounts[i];\\n            } else if (_rewardTypes[i] == RewardType.Token) {\\n                require(_tokenAddresses[i] != address(0), \\\"Invalid token address\\\");\\n                IERC20(_tokenAddresses[i]).transferFrom(msg.sender, address(this), _rewardAmounts[i]);\\n            }\\n        }\\n        \\n        require(msg.value >= ethValue, \\\"Insufficient ETH sent\\\");\\n        \\n        uint256 packetId = _createPacket(\\n            msg.value,\\n            _rewardTypes,\\n            _rewardAmounts,\\n            _tokenAddresses,\\n            _nftIds,\\n            RandomnessSource.CommitReveal\\n        );\\n        \\n        return packetId;\\n    }\\n    \\n    /**\\n     * @dev Internal function to create a packet\\n     */\\n    function _createPacket(\\n        uint256 _totalValue,\\n        RewardType[] memory _rewardTypes,\\n        uint256[] memory _rewardAmounts,\\n        address[] memory _tokenAddresses,\\n        uint256[] memory _nftIds,\\n        RandomnessSource _randomnessSource\\n    ) internal returns (uint256) {\\n        uint256 packetId = nextPacketId++;\\n        \\n        Packet storage packet = packets[packetId];\\n        packet.creator = msg.sender;\\n        packet.totalValue = _totalValue;\\n        packet.createdAt = block.timestamp;\\n        packet.expiresAt = block.timestamp + defaultExpiryTime;\\n        packet.status = PacketStatus.Active;\\n        packet.rewardTypes = _rewardTypes;\\n        packet.rewardAmounts = _rewardAmounts;\\n        packet.tokenAddresses = _tokenAddresses;\\n        packet.nftIds = _nftIds;\\n        packet.randomnessSource = _randomnessSource;\\n        packet.requiresVRF = (_randomnessSource == RandomnessSource.VRF);\\n        \\n        userPackets[msg.sender].push(packetId);\\n        \\n        emit PacketCreated(packetId, msg.sender, _totalValue);\\n        \\n        return packetId;\\n    }\\n    \\n    /**\\n     * @dev Open a packet using block hash randomness\\n     */\\n    function openPacket(uint256 _packetId) external {\\n        Packet storage packet = packets[_packetId];\\n        require(packet.status == PacketStatus.Active, \\\"Packet not active\\\");\\n        require(block.timestamp <= packet.expiresAt, \\\"Packet expired\\\");\\n        require(!packet.requiresVRF, \\\"Use VRF opening method\\\");\\n        require(packet.randomnessSource != RandomnessSource.CommitReveal, \\\"Use commit-reveal method\\\");\\n        \\n        uint256 randomValue = _generateBlockHashRandom(_packetId);\\n        _distributeReward(_packetId, randomValue, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Open packet with VRF randomness\\n     */\\n    function openPacketWithVRF(uint256 _packetId) external {\\n        Packet storage packet = packets[_packetId];\\n        require(packet.status == PacketStatus.Active, \\\"Packet not active\\\");\\n        require(block.timestamp <= packet.expiresAt, \\\"Packet expired\\\");\\n        require(packet.requiresVRF, \\\"Use regular opening method\\\");\\n        require(packet.vrfRequestId == 0, \\\"VRF already requested\\\");\\n        \\n        uint256 requestId = vrfCoordinator.requestRandomWords(\\n            keyHash,\\n            subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            1\\n        );\\n        \\n        packet.vrfRequestId = requestId;\\n        vrfRequestToPacket[requestId] = _packetId;\\n        \\n        emit RandomnessRequested(requestId, _packetId);\\n    }\\n    \\n    /**\\n     * @dev Chainlink VRF callback\\n     */\\n    function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) external {\\n        require(msg.sender == address(vrfCoordinator), \\\"Only VRF coordinator\\\");\\n        \\n        uint256 packetId = vrfRequestToPacket[_requestId];\\n        require(packetId != 0, \\\"Invalid request ID\\\");\\n        \\n        uint256 randomValue = _randomWords[0];\\n        emit RandomnessFulfilled(_requestId, randomValue);\\n        \\n        Packet storage packet = packets[packetId];\\n        // Find who initiated the VRF request (simplified - in production, store this)\\n        address opener = packet.creator; // This should be stored when VRF is requested\\n        \\n        _distributeReward(packetId, randomValue, opener);\\n    }\\n    \\n    /**\\n     * @dev Commit phase for commit-reveal randomness\\n     */\\n    function commitForPacket(uint256 _packetId, bytes32 _commitment) external {\\n        Packet storage packet = packets[_packetId];\\n        require(packet.status == PacketStatus.Active, \\\"Packet not active\\\");\\n        require(packet.randomnessSource == RandomnessSource.CommitReveal, \\\"Not commit-reveal packet\\\");\\n        \\n        commitRevealData[_packetId] = CommitRevealData({\\n            commitment: _commitment,\\n            revealDeadline: block.timestamp + commitRevealWindow,\\n            revealed: false,\\n            nonce: 0\\n        });\\n    }\\n    \\n    /**\\n     * @dev Reveal phase for commit-reveal randomness\\n     */\\n    function revealAndOpen(uint256 _packetId, uint256 _nonce, uint256 _value) external {\\n        Packet storage packet = packets[_packetId];\\n        CommitRevealData storage commitData = commitRevealData[_packetId];\\n        \\n        require(packet.status == PacketStatus.Active, \\\"Packet not active\\\");\\n        require(block.timestamp <= commitData.revealDeadline, \\\"Reveal deadline passed\\\");\\n        require(!commitData.revealed, \\\"Already revealed\\\");\\n        require(\\n            keccak256(abi.encodePacked(_value, _nonce)) == commitData.commitment,\\n            \\\"Invalid reveal\\\"\\n        );\\n        \\n        commitData.revealed = true;\\n        commitData.nonce = _nonce;\\n        \\n        uint256 randomValue = uint256(keccak256(abi.encodePacked(_value, block.timestamp, block.difficulty)));\\n        _distributeReward(_packetId, randomValue, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Generate pseudo-random number using block hash\\n     */\\n    function _generateBlockHashRandom(uint256 _packetId) internal view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(\\n            block.timestamp,\\n            block.difficulty,\\n            msg.sender,\\n            _packetId,\\n            blockhash(block.number - 1)\\n        )));\\n    }\\n    \\n    /**\\n     * @dev Distribute reward based on random value\\n     */\\n    function _distributeReward(uint256 _packetId, uint256 _randomValue, address _opener) internal {\\n        Packet storage packet = packets[_packetId];\\n        packet.status = PacketStatus.Opened;\\n        \\n        if (packet.rewardTypes.length == 0) {\\n            emit PacketOpened(_packetId, _opener, 0, RewardType.Empty);\\n            return;\\n        }\\n        \\n        uint256 rewardIndex = _randomValue % packet.rewardTypes.length;\\n        RewardType rewardType = packet.rewardTypes[rewardIndex];\\n        uint256 rewardAmount = packet.rewardAmounts[rewardIndex];\\n        \\n        if (rewardType == RewardType.ETH) {\\n            payable(_opener).transfer(rewardAmount);\\n        } else if (rewardType == RewardType.Token) {\\n            IERC20(packet.tokenAddresses[rewardIndex]).transfer(_opener, rewardAmount);\\n        }\\n        // NFT transfers would be implemented here\\n        \\n        emit PacketOpened(_packetId, _opener, rewardAmount, rewardType);\\n    }\\n    \\n    /**\\n     * @dev Cancel an expired packet and refund creator\\n     */\\n    function cancelExpiredPacket(uint256 _packetId) external {\\n        Packet storage packet = packets[_packetId];\\n        require(packet.status == PacketStatus.Active, \\\"Packet not active\\\");\\n        require(block.timestamp > packet.expiresAt, \\\"Packet not expired\\\");\\n        require(msg.sender == packet.creator || msg.sender == owner, \\\"Not authorized\\\");\\n        \\n        packet.status = PacketStatus.Cancelled;\\n        \\n        // Refund ETH\\n        if (packet.totalValue > 0) {\\n            payable(packet.creator).transfer(packet.totalValue);\\n        }\\n        \\n        // Refund tokens\\n        for (uint i = 0; i < packet.rewardTypes.length; i++) {\\n            if (packet.rewardTypes[i] == RewardType.Token) {\\n                IERC20(packet.tokenAddresses[i]).transfer(packet.creator, packet.rewardAmounts[i]);\\n            }\\n        }\\n    }\\n    \\n    /**\\n     * @dev Get packet details\\n     */\\n    function getPacket(uint256 _packetId) external view returns (\\n        address creator,\\n        uint256 totalValue,\\n        uint256 createdAt,\\n        uint256 expiresAt,\\n        PacketStatus status,\\n        uint256 rewardCount\\n    ) {\\n        Packet storage packet = packets[_packetId];\\n        return (\\n            packet.creator,\\n            packet.totalValue,\\n            packet.createdAt,\\n            packet.expiresAt,\\n            packet.status,\\n            packet.rewardTypes.length\\n        );\\n    }\\n    \\n    /**\\n     * @dev Get user's packets\\n     */\\n    function getUserPackets(address _user) external view returns (uint256[] memory) {\\n        return userPackets[_user];\\n    }\\n    \\n    /**\\n     * @dev Admin functions\\n     */\\n    function setAuthorizedCreator(address _creator, bool _authorized) external onlyOwner {\\n        authorizedCreators[_creator] = _authorized;\\n    }\\n    \\n    function setDefaultExpiryTime(uint256 _expiryTime) external onlyOwner {\\n        defaultExpiryTime = _expiryTime;\\n    }\\n    \\n    function setVRFParameters(\\n        bytes32 _keyHash,\\n        uint64 _subscriptionId,\\n        uint16 _requestConfirmations,\\n        uint32 _callbackGasLimit\\n    ) external onlyOwner {\\n        keyHash = _keyHash;\\n        subscriptionId = _subscriptionId;\\n        requestConfirmations = _requestConfirmations;\\n        callbackGasLimit = _callbackGasLimit;\\n    }\\n    \\n    /**\\n     * @dev Emergency withdrawal function\\n     */\\n    function emergencyWithdraw() external onlyOwner {\\n        payable(owner).transfer(address(this).balance);\\n    }\\n    \\n    // Receive function to accept ETH\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x58126341982a09aa89b3ae640a5ae9c2d1211c0e36eb52e587357f1e9f729eb5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600160045562093a80600555610e106006556009805465ffffffffffff60401b19166c0186a0000300000000000000001790553480156200004457600080fd5b506040516200285d3803806200285d8339810160408190526200006791620000d9565b600a8054336001600160a01b031991821681179092556000918252600b6020526040909120805460ff19166001179055600780549091166001600160a01b039490941693909317909255600855600980546001600160401b0319166001600160401b0390921691909117905562000137565b600080600060608486031215620000ef57600080fd5b83516001600160a01b03811681146200010757600080fd5b6020850151604086015191945092506001600160401b03811681146200012c57600080fd5b809150509250925092565b61271680620001476000396000f3fe6080604052600436106101c65760003560e01c80636636a448116100f7578063b0fb162f11610095578063e1434f4e11610064578063e1434f4e14610654578063ed4c167b14610674578063f29d04ab14610694578063f32c51b1146106b457600080fd5b8063b0fb162f14610545578063c695502a1461057a578063d0a9e0c0146105ba578063db2e21bc1461063f57600080fd5b80639d570502116100d15780639d57050214610467578063a2600b1c14610487578063a3e56fa8146104b4578063a59455dc146104d457600080fd5b80636636a448146103ad5780636917d78c146104195780638da5cb5b1461042f57600080fd5b806335ad95b911610164578063390b57861161013e578063390b5786146103445780633f1a4c8c146103645780635ca6fcea1461037757806361728f391461039757600080fd5b806335ad95b9146102d757806335b69ed51461030457806338ba46141461032457600080fd5b806326947a14116101a057806326947a141461026c5780632864f57b146102825780632c606568146102955780632cb1f024146102b757600080fd5b806309c1ba2e146101d25780631aefa1b61461020f57806324f746971461023357600080fd5b366101cd57005b600080fd5b3480156101de57600080fd5b506009546101f2906001600160401b031681565b6040516001600160401b0390911681526020015b60405180910390f35b34801561021b57600080fd5b5061022560065481565b604051908152602001610206565b34801561023f57600080fd5b5060095461025790600160501b900463ffffffff1681565b60405163ffffffff9091168152602001610206565b34801561027857600080fd5b5061022560055481565b6102256102903660046120d9565b6106d4565b3480156102a157600080fd5b506102b56102b036600461211f565b610924565b005b3480156102c357600080fd5b506102b56102d2366004612141565b610a43565b3480156102e357600080fd5b506102256102f2366004612141565b60026020526000908152604090205481565b34801561031057600080fd5b506102b561031f366004612141565b610ba5565b34801561033057600080fd5b506102b561033f3660046120d9565b610bd4565b34801561035057600080fd5b5061022561035f366004612176565b610cfe565b610225610372366004612202565b610d2f565b34801561038357600080fd5b506102b5610392366004612141565b610fec565b3480156103a357600080fd5b5061022560085481565b3480156103b957600080fd5b506103f36103c8366004612141565b60016020819052600091825260409091208054918101546002820154600390920154909160ff169084565b604080519485526020850193909352901515918301919091526060820152608001610206565b34801561042557600080fd5b5061022560045481565b34801561043b57600080fd5b50600a5461044f906001600160a01b031681565b6040516001600160a01b039091168152602001610206565b34801561047357600080fd5b506102b5610482366004612311565b611211565b34801561049357600080fd5b506104a76104a236600461233d565b6113b9565b604051610206919061235f565b3480156104c057600080fd5b5060075461044f906001600160a01b031681565b3480156104e057600080fd5b506105336104ef366004612141565b6000908152602081905260409020805460018201546002830154600384015460048501546005909501546001600160a01b039094169592949193909260ff90921691565b604051610206969594939291906123c9565b34801561055157600080fd5b5060095461056790600160401b900461ffff1681565b60405161ffff9091168152602001610206565b34801561058657600080fd5b506105aa61059536600461233d565b600b6020526000908152604090205460ff1681565b6040519015158152602001610206565b3480156105c657600080fd5b5061062b6105d5366004612141565b6000602081905290815260409020805460018201546002830154600384015460048501546009860154600a909601546001600160a01b039095169593949293919260ff9182169280831692610100909104169088565b60405161020698979695949392919061240b565b34801561064b57600080fd5b506102b5611425565b34801561066057600080fd5b506102b561066f36600461247d565b61148b565b34801561068057600080fd5b506102b561068f366004612141565b6114e0565b3480156106a057600080fd5b506102b56106af3660046124b4565b61175d565b3480156106c057600080fd5b506102256106cf366004612523565b6117dc565b600080831180156106e65750600a8311155b61070b5760405162461bcd60e51b815260040161070290612584565b60405180910390fd5b8282511461074f5760405162461bcd60e51b81526020600482015260116024820152704d69736d6174636865642061727261797360781b6044820152606401610702565b6000805b83518110156107955783818151811061076e5761076e6125b2565b60200260200101518261078191906125de565b91508061078d816125f1565b915050610753565b50803410156107de5760405162461bcd60e51b8152602060048201526015602482015274125b9cdd59999a58da595b9d08115512081cd95b9d605a1b6044820152606401610702565b6000846001600160401b038111156107f8576107f8612005565b604051908082528060200260200182016040528015610821578160200160208202803683370190505b50905060005b85811015610884576000828281518110610843576108436125b2565b6020026020010190600381111561085c5761085c6123a3565b9081600381111561086f5761086f6123a3565b9052508061087c816125f1565b915050610827565b506000610918838387896001600160401b038111156108a5576108a5612005565b6040519080825280602002602001820160405280156108ce578160200160208202803683370190505b508a6001600160401b038111156108e7576108e7612005565b604051908082528060200260200182016040528015610910578160200160208202803683370190505b506000611a98565b93505050505b92915050565b600082815260208190526040812090600482015460ff16600381111561094c5761094c6123a3565b146109695760405162461bcd60e51b81526004016107029061260a565b6002600982015460ff166002811115610984576109846123a3565b146109d15760405162461bcd60e51b815260206004820152601860248201527f4e6f7420636f6d6d69742d72657665616c207061636b657400000000000000006044820152606401610702565b6040518060800160405280838152602001600654426109f091906125de565b815260006020808301829052604092830182905295815260018087529082902083518155958301519086015581015160028501805460ff1916911515919091179055606001516003909301929092555050565b600081815260208190526040812090600482015460ff166003811115610a6b57610a6b6123a3565b14610a885760405162461bcd60e51b81526004016107029061260a565b8060030154421115610acd5760405162461bcd60e51b815260206004820152600e60248201526d141858dad95d08195e1c1a5c995960921b6044820152606401610702565b6009810154610100900460ff1615610b205760405162461bcd60e51b8152602060048201526016602482015275155cd948159491881bdc195b9a5b99c81b595d1a1bd960521b6044820152606401610702565b6002600982015460ff166002811115610b3b57610b3b6123a3565b03610b885760405162461bcd60e51b815260206004820152601860248201527f55736520636f6d6d69742d72657665616c206d6574686f6400000000000000006044820152606401610702565b6000610b9383611c0c565b9050610ba0838233611c76565b505050565b600a546001600160a01b03163314610bcf5760405162461bcd60e51b815260040161070290612635565b600555565b6007546001600160a01b03163314610c255760405162461bcd60e51b815260206004820152601460248201527327b7363c902b29231031b7b7b93234b730ba37b960611b6044820152606401610702565b60008281526002602052604081205490819003610c795760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081c995c5d595cdd08125160721b6044820152606401610702565b600082600081518110610c8e57610c8e6125b2565b60200260200101519050837f546aca7b2683440b8f02fa95faeb8efc79dd0f16af3d815a002742ea6f76116c82604051610cca91815260200190565b60405180910390a2600082815260208190526040902080546001600160a01b0316610cf6848483611c76565b505050505050565b60036020528160005260406000208181548110610d1a57600080fd5b90600052602060002001600091509150505481565b6000808551118015610d435750600a855111155b610d5f5760405162461bcd60e51b815260040161070290612584565b8351855114610da45760405162461bcd60e51b81526020600482015260116024820152704d69736d6174636865642061727261797360781b6044820152606401610702565b6000805b8651811015610f87576000878281518110610dc557610dc56125b2565b60200260200101516003811115610dde57610dde6123a3565b03610e0f57858181518110610df557610df56125b2565b602002602001015182610e0891906125de565b9150610f75565b6001878281518110610e2357610e236125b2565b60200260200101516003811115610e3c57610e3c6123a3565b03610f755760006001600160a01b0316858281518110610e5e57610e5e6125b2565b60200260200101516001600160a01b031603610eb45760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606401610702565b848181518110610ec657610ec66125b2565b60200260200101516001600160a01b03166323b872dd3330898581518110610ef057610ef06125b2565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610f4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f739190612658565b505b80610f7f816125f1565b915050610da8565b5080341015610fd05760405162461bcd60e51b8152602060048201526015602482015274125b9cdd59999a58da595b9d08115512081cd95b9d605a1b6044820152606401610702565b6000610fe134888888886002611a98565b979650505050505050565b600081815260208190526040812090600482015460ff166003811115611014576110146123a3565b146110315760405162461bcd60e51b81526004016107029061260a565b80600301544211156110765760405162461bcd60e51b815260206004820152600e60248201526d141858dad95d08195e1c1a5c995960921b6044820152606401610702565b6009810154610100900460ff166110cf5760405162461bcd60e51b815260206004820152601a60248201527f55736520726567756c6172206f70656e696e67206d6574686f640000000000006044820152606401610702565b600a810154156111195760405162461bcd60e51b815260206004820152601560248201527415949188185b1c9958591e481c995c5d595cdd1959605a1b6044820152606401610702565b6007546008546009546040516305d3b1d360e41b815260048101929092526001600160401b0381166024830152600160401b810461ffff166044830152600160501b900463ffffffff166064820152600160848201526000916001600160a01b031690635d3b1d309060a4016020604051808303816000875af11580156111a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c89190612675565b600a830181905560008181526002602052604080822086905551919250849183917f3d94fecedaa4f90b8bd459797adb95f5bb11426025c5541390d9ccc1ad1b60a191a3505050565b600083815260208181526040808320600190925282209091600483015460ff166003811115611242576112426123a3565b1461125f5760405162461bcd60e51b81526004016107029061260a565b80600101544211156112ac5760405162461bcd60e51b815260206004820152601660248201527514995d99585b08191958591b1a5b99481c185cdcd95960521b6044820152606401610702565b600281015460ff16156112f45760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c995d99585b195960821b6044820152606401610702565b80546040805160208101869052908101869052606001604051602081830303815290604052805190602001201461135e5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c995d99585b60921b6044820152606401610702565b60028101805460ff1916600117905560038101849055604080516020810185905242918101919091524460608201526000906080016040516020818303038152906040528051906020012060001c9050610cf6868233611c76565b6001600160a01b03811660009081526003602090815260409182902080548351818402810184019094528084526060939283018282801561141957602002820191906000526020600020905b815481526020019060010190808311611405575b50505050509050919050565b600a546001600160a01b0316331461144f5760405162461bcd60e51b815260040161070290612635565b600a546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015611488573d6000803e3d6000fd5b50565b600a546001600160a01b031633146114b55760405162461bcd60e51b815260040161070290612635565b6001600160a01b03919091166000908152600b60205260409020805460ff1916911515919091179055565b600081815260208190526040812090600482015460ff166003811115611508576115086123a3565b146115255760405162461bcd60e51b81526004016107029061260a565b8060030154421161156d5760405162461bcd60e51b8152602060048201526012602482015271141858dad95d081b9bdd08195e1c1a5c995960721b6044820152606401610702565b80546001600160a01b031633148061158f5750600a546001600160a01b031633145b6115cc5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610702565b60048101805460ff1916600317905560018101541561162457805460018201546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015611622573d6000803e3d6000fd5b505b60005b6005820154811015610ba057600182600501828154811061164a5761164a6125b2565b90600052602060002090602091828204019190069054906101000a900460ff16600381111561167b5761167b6123a3565b0361174b57816007018181548110611695576116956125b2565b60009182526020909120015482546006840180546001600160a01b039384169363a9059cbb93169190859081106116ce576116ce6125b2565b6000918252602090912001546040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611725573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117499190612658565b505b80611755816125f1565b915050611627565b600a546001600160a01b031633146117875760405162461bcd60e51b815260040161070290612635565b6008939093556009805463ffffffff909416600160501b0263ffffffff60501b1961ffff909316600160401b0269ffffffffffffffffffff199095166001600160401b03909416939093179390931716179055565b60008083511180156117f05750600a835111155b61180c5760405162461bcd60e51b815260040161070290612584565b6000805b84518110156118525784818151811061182b5761182b6125b2565b60200260200101518261183e91906125de565b91508061184a816125f1565b915050611810565b506040516323b872dd60e01b81523360048201523060248201526044810182905285906001600160a01b038216906323b872dd906064016020604051808303816000875af11580156118a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cc9190612658565b6119105760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610702565b600085516001600160401b0381111561192b5761192b612005565b604051908082528060200260200182016040528015611954578160200160208202803683370190505b509050600086516001600160401b0381111561197257611972612005565b60405190808252806020026020018201604052801561199b578160200160208202803683370190505b50905060005b8751811015611a2b5760018382815181106119be576119be6125b2565b602002602001019060038111156119d7576119d76123a3565b908160038111156119ea576119ea6123a3565b8152505088828281518110611a0157611a016125b2565b6001600160a01b039092166020928302919091019091015280611a23816125f1565b9150506119a1565b506000611a8b85848a858c516001600160401b03811115611a4e57611a4e612005565b604051908082528060200260200182016040528015611a77578160200160208202803683370190505b508c611a84576000611a98565b6001611a98565b9998505050505050505050565b6004805460009182919082611aac836125f1565b90915550600081815260208190526040902080546001600160a01b03191633178155600181018a905542600282018190556005549293509091611aee916125de565b600382015560048101805460ff191690558751611b1490600583019060208b0190611eac565b508651611b2a90600683019060208a0190611f60565b508551611b409060078301906020890190611f9b565b508451611b569060088301906020880190611f60565b5060098101805485919060ff19166001836002811115611b7857611b786123a3565b02179055506001846002811115611b9157611b916123a3565b60098301805461ff001916919092146101000217905533600081815260036020908152604080832080546001810182559084529282902090920185905590518b815284917f1d999e6d0aed36ea80544d0939873285e49b1592ea68247f048e63ffc1b01171910160405180910390a350979650505050505050565b600042443384611c1d60014361268e565b6040805160208101969096528501939093526bffffffffffffffffffffffff19606092831b1691840191909152607483015240609482015260b40160408051601f19818403018152919052805160209091012092915050565b600083815260208190526040812060048101805460ff191660011790556005810154909103611ceb57816001600160a01b0316847f96733c83c38055dc9ad5960359e547536db97d423905a340cc18be0dabc9d79960006003604051611cdd9291906126a1565b60405180910390a350505050565b6005810154600090611cfd90856126be565b90506000826005018281548110611d1657611d166125b2565b90600052602060002090602091828204019190069054906101000a900460ff1690506000836006018381548110611d4f57611d4f6125b2565b60009182526020822001549150826003811115611d6e57611d6e6123a3565b03611daf576040516001600160a01b0386169082156108fc029083906000818181858888f19350505050158015611da9573d6000803e3d6000fd5b50611e5f565b6001826003811115611dc357611dc36123a3565b03611e5f57836007018381548110611ddd57611ddd6125b2565b60009182526020909120015460405163a9059cbb60e01b81526001600160a01b038781166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af1158015611e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5d9190612658565b505b846001600160a01b0316877f96733c83c38055dc9ad5960359e547536db97d423905a340cc18be0dabc9d7998385604051611e9b9291906126a1565b60405180910390a350505050505050565b82805482825590600052602060002090601f01602090048101928215611f505791602002820160005b83821115611f2157835183826101000a81548160ff02191690836003811115611f0057611f006123a3565b02179055509260200192600101602081600001049283019260010302611ed5565b8015611f4e5782816101000a81549060ff0219169055600101602081600001049283019260010302611f21565b505b50611f5c929150611ff0565b5090565b828054828255906000526020600020908101928215611f50579160200282015b82811115611f50578251825591602001919060010190611f80565b828054828255906000526020600020908101928215611f50579160200282015b82811115611f5057825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611fbb565b5b80821115611f5c5760008155600101611ff1565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561204357612043612005565b604052919050565b60006001600160401b0382111561206457612064612005565b5060051b60200190565b600082601f83011261207f57600080fd5b8135602061209461208f8361204b565b61201b565b82815260059290921b840181019181810190868411156120b357600080fd5b8286015b848110156120ce57803583529183019183016120b7565b509695505050505050565b600080604083850312156120ec57600080fd5b8235915060208301356001600160401b0381111561210957600080fd5b6121158582860161206e565b9150509250929050565b6000806040838503121561213257600080fd5b50508035926020909101359150565b60006020828403121561215357600080fd5b5035919050565b80356001600160a01b038116811461217157600080fd5b919050565b6000806040838503121561218957600080fd5b6121928361215a565b946020939093013593505050565b600082601f8301126121b157600080fd5b813560206121c161208f8361204b565b82815260059290921b840181019181810190868411156121e057600080fd5b8286015b848110156120ce576121f58161215a565b83529183019183016121e4565b6000806000806080858703121561221857600080fd5b84356001600160401b038082111561222f57600080fd5b818701915087601f83011261224357600080fd5b8135602061225361208f8361204b565b82815260059290921b8401810191818101908b84111561227257600080fd5b948201945b8386101561229e5785356004811061228f5760008081fd5b82529482019490820190612277565b985050880135925050808211156122b457600080fd5b6122c08883890161206e565b945060408701359150808211156122d657600080fd5b6122e2888389016121a0565b935060608701359150808211156122f857600080fd5b506123058782880161206e565b91505092959194509250565b60008060006060848603121561232657600080fd5b505081359360208301359350604090920135919050565b60006020828403121561234f57600080fd5b6123588261215a565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156123975783518352928401929184019160010161237b565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b60048110611488576114886123a3565b6001600160a01b038716815260208101869052604081018590526060810184905260c081016123f7846123b9565b608082019390935260a00152949350505050565b6001600160a01b0389168152602081018890526040810187905260608101869052610100810161243a866123b9565b85608083015260038510612450576124506123a3565b60a082019490945291151560c083015260e09091015295945050505050565b801515811461148857600080fd5b6000806040838503121561249057600080fd5b6124998361215a565b915060208301356124a98161246f565b809150509250929050565b600080600080608085870312156124ca57600080fd5b8435935060208501356001600160401b03811681146124e857600080fd5b9250604085013561ffff811681146124ff57600080fd5b9150606085013563ffffffff8116811461251857600080fd5b939692955090935050565b60008060006060848603121561253857600080fd5b6125418461215a565b925060208401356001600160401b0381111561255c57600080fd5b6125688682870161206e565b92505060408401356125798161246f565b809150509250925092565b602080825260149082015273125b9d985b1a59081c995dd85c990818dbdd5b9d60621b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561091e5761091e6125c8565b600060018201612603576126036125c8565b5060010190565b6020808252601190820152705061636b6574206e6f742061637469766560781b604082015260600190565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b60006020828403121561266a57600080fd5b81516123588161246f565b60006020828403121561268757600080fd5b5051919050565b8181038181111561091e5761091e6125c8565b828152604081016126b1836123b9565b8260208301529392505050565b6000826126db57634e487b7160e01b600052601260045260246000fd5b50069056fea2646970667358221220fe9afea67cb26d3ae3f0bf077499ce13c803992150d5e4c6724337e65519c06a64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101c65760003560e01c80636636a448116100f7578063b0fb162f11610095578063e1434f4e11610064578063e1434f4e14610654578063ed4c167b14610674578063f29d04ab14610694578063f32c51b1146106b457600080fd5b8063b0fb162f14610545578063c695502a1461057a578063d0a9e0c0146105ba578063db2e21bc1461063f57600080fd5b80639d570502116100d15780639d57050214610467578063a2600b1c14610487578063a3e56fa8146104b4578063a59455dc146104d457600080fd5b80636636a448146103ad5780636917d78c146104195780638da5cb5b1461042f57600080fd5b806335ad95b911610164578063390b57861161013e578063390b5786146103445780633f1a4c8c146103645780635ca6fcea1461037757806361728f391461039757600080fd5b806335ad95b9146102d757806335b69ed51461030457806338ba46141461032457600080fd5b806326947a14116101a057806326947a141461026c5780632864f57b146102825780632c606568146102955780632cb1f024146102b757600080fd5b806309c1ba2e146101d25780631aefa1b61461020f57806324f746971461023357600080fd5b366101cd57005b600080fd5b3480156101de57600080fd5b506009546101f2906001600160401b031681565b6040516001600160401b0390911681526020015b60405180910390f35b34801561021b57600080fd5b5061022560065481565b604051908152602001610206565b34801561023f57600080fd5b5060095461025790600160501b900463ffffffff1681565b60405163ffffffff9091168152602001610206565b34801561027857600080fd5b5061022560055481565b6102256102903660046120d9565b6106d4565b3480156102a157600080fd5b506102b56102b036600461211f565b610924565b005b3480156102c357600080fd5b506102b56102d2366004612141565b610a43565b3480156102e357600080fd5b506102256102f2366004612141565b60026020526000908152604090205481565b34801561031057600080fd5b506102b561031f366004612141565b610ba5565b34801561033057600080fd5b506102b561033f3660046120d9565b610bd4565b34801561035057600080fd5b5061022561035f366004612176565b610cfe565b610225610372366004612202565b610d2f565b34801561038357600080fd5b506102b5610392366004612141565b610fec565b3480156103a357600080fd5b5061022560085481565b3480156103b957600080fd5b506103f36103c8366004612141565b60016020819052600091825260409091208054918101546002820154600390920154909160ff169084565b604080519485526020850193909352901515918301919091526060820152608001610206565b34801561042557600080fd5b5061022560045481565b34801561043b57600080fd5b50600a5461044f906001600160a01b031681565b6040516001600160a01b039091168152602001610206565b34801561047357600080fd5b506102b5610482366004612311565b611211565b34801561049357600080fd5b506104a76104a236600461233d565b6113b9565b604051610206919061235f565b3480156104c057600080fd5b5060075461044f906001600160a01b031681565b3480156104e057600080fd5b506105336104ef366004612141565b6000908152602081905260409020805460018201546002830154600384015460048501546005909501546001600160a01b039094169592949193909260ff90921691565b604051610206969594939291906123c9565b34801561055157600080fd5b5060095461056790600160401b900461ffff1681565b60405161ffff9091168152602001610206565b34801561058657600080fd5b506105aa61059536600461233d565b600b6020526000908152604090205460ff1681565b6040519015158152602001610206565b3480156105c657600080fd5b5061062b6105d5366004612141565b6000602081905290815260409020805460018201546002830154600384015460048501546009860154600a909601546001600160a01b039095169593949293919260ff9182169280831692610100909104169088565b60405161020698979695949392919061240b565b34801561064b57600080fd5b506102b5611425565b34801561066057600080fd5b506102b561066f36600461247d565b61148b565b34801561068057600080fd5b506102b561068f366004612141565b6114e0565b3480156106a057600080fd5b506102b56106af3660046124b4565b61175d565b3480156106c057600080fd5b506102256106cf366004612523565b6117dc565b600080831180156106e65750600a8311155b61070b5760405162461bcd60e51b815260040161070290612584565b60405180910390fd5b8282511461074f5760405162461bcd60e51b81526020600482015260116024820152704d69736d6174636865642061727261797360781b6044820152606401610702565b6000805b83518110156107955783818151811061076e5761076e6125b2565b60200260200101518261078191906125de565b91508061078d816125f1565b915050610753565b50803410156107de5760405162461bcd60e51b8152602060048201526015602482015274125b9cdd59999a58da595b9d08115512081cd95b9d605a1b6044820152606401610702565b6000846001600160401b038111156107f8576107f8612005565b604051908082528060200260200182016040528015610821578160200160208202803683370190505b50905060005b85811015610884576000828281518110610843576108436125b2565b6020026020010190600381111561085c5761085c6123a3565b9081600381111561086f5761086f6123a3565b9052508061087c816125f1565b915050610827565b506000610918838387896001600160401b038111156108a5576108a5612005565b6040519080825280602002602001820160405280156108ce578160200160208202803683370190505b508a6001600160401b038111156108e7576108e7612005565b604051908082528060200260200182016040528015610910578160200160208202803683370190505b506000611a98565b93505050505b92915050565b600082815260208190526040812090600482015460ff16600381111561094c5761094c6123a3565b146109695760405162461bcd60e51b81526004016107029061260a565b6002600982015460ff166002811115610984576109846123a3565b146109d15760405162461bcd60e51b815260206004820152601860248201527f4e6f7420636f6d6d69742d72657665616c207061636b657400000000000000006044820152606401610702565b6040518060800160405280838152602001600654426109f091906125de565b815260006020808301829052604092830182905295815260018087529082902083518155958301519086015581015160028501805460ff1916911515919091179055606001516003909301929092555050565b600081815260208190526040812090600482015460ff166003811115610a6b57610a6b6123a3565b14610a885760405162461bcd60e51b81526004016107029061260a565b8060030154421115610acd5760405162461bcd60e51b815260206004820152600e60248201526d141858dad95d08195e1c1a5c995960921b6044820152606401610702565b6009810154610100900460ff1615610b205760405162461bcd60e51b8152602060048201526016602482015275155cd948159491881bdc195b9a5b99c81b595d1a1bd960521b6044820152606401610702565b6002600982015460ff166002811115610b3b57610b3b6123a3565b03610b885760405162461bcd60e51b815260206004820152601860248201527f55736520636f6d6d69742d72657665616c206d6574686f6400000000000000006044820152606401610702565b6000610b9383611c0c565b9050610ba0838233611c76565b505050565b600a546001600160a01b03163314610bcf5760405162461bcd60e51b815260040161070290612635565b600555565b6007546001600160a01b03163314610c255760405162461bcd60e51b815260206004820152601460248201527327b7363c902b29231031b7b7b93234b730ba37b960611b6044820152606401610702565b60008281526002602052604081205490819003610c795760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081c995c5d595cdd08125160721b6044820152606401610702565b600082600081518110610c8e57610c8e6125b2565b60200260200101519050837f546aca7b2683440b8f02fa95faeb8efc79dd0f16af3d815a002742ea6f76116c82604051610cca91815260200190565b60405180910390a2600082815260208190526040902080546001600160a01b0316610cf6848483611c76565b505050505050565b60036020528160005260406000208181548110610d1a57600080fd5b90600052602060002001600091509150505481565b6000808551118015610d435750600a855111155b610d5f5760405162461bcd60e51b815260040161070290612584565b8351855114610da45760405162461bcd60e51b81526020600482015260116024820152704d69736d6174636865642061727261797360781b6044820152606401610702565b6000805b8651811015610f87576000878281518110610dc557610dc56125b2565b60200260200101516003811115610dde57610dde6123a3565b03610e0f57858181518110610df557610df56125b2565b602002602001015182610e0891906125de565b9150610f75565b6001878281518110610e2357610e236125b2565b60200260200101516003811115610e3c57610e3c6123a3565b03610f755760006001600160a01b0316858281518110610e5e57610e5e6125b2565b60200260200101516001600160a01b031603610eb45760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606401610702565b848181518110610ec657610ec66125b2565b60200260200101516001600160a01b03166323b872dd3330898581518110610ef057610ef06125b2565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610f4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f739190612658565b505b80610f7f816125f1565b915050610da8565b5080341015610fd05760405162461bcd60e51b8152602060048201526015602482015274125b9cdd59999a58da595b9d08115512081cd95b9d605a1b6044820152606401610702565b6000610fe134888888886002611a98565b979650505050505050565b600081815260208190526040812090600482015460ff166003811115611014576110146123a3565b146110315760405162461bcd60e51b81526004016107029061260a565b80600301544211156110765760405162461bcd60e51b815260206004820152600e60248201526d141858dad95d08195e1c1a5c995960921b6044820152606401610702565b6009810154610100900460ff166110cf5760405162461bcd60e51b815260206004820152601a60248201527f55736520726567756c6172206f70656e696e67206d6574686f640000000000006044820152606401610702565b600a810154156111195760405162461bcd60e51b815260206004820152601560248201527415949188185b1c9958591e481c995c5d595cdd1959605a1b6044820152606401610702565b6007546008546009546040516305d3b1d360e41b815260048101929092526001600160401b0381166024830152600160401b810461ffff166044830152600160501b900463ffffffff166064820152600160848201526000916001600160a01b031690635d3b1d309060a4016020604051808303816000875af11580156111a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c89190612675565b600a830181905560008181526002602052604080822086905551919250849183917f3d94fecedaa4f90b8bd459797adb95f5bb11426025c5541390d9ccc1ad1b60a191a3505050565b600083815260208181526040808320600190925282209091600483015460ff166003811115611242576112426123a3565b1461125f5760405162461bcd60e51b81526004016107029061260a565b80600101544211156112ac5760405162461bcd60e51b815260206004820152601660248201527514995d99585b08191958591b1a5b99481c185cdcd95960521b6044820152606401610702565b600281015460ff16156112f45760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c995d99585b195960821b6044820152606401610702565b80546040805160208101869052908101869052606001604051602081830303815290604052805190602001201461135e5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c995d99585b60921b6044820152606401610702565b60028101805460ff1916600117905560038101849055604080516020810185905242918101919091524460608201526000906080016040516020818303038152906040528051906020012060001c9050610cf6868233611c76565b6001600160a01b03811660009081526003602090815260409182902080548351818402810184019094528084526060939283018282801561141957602002820191906000526020600020905b815481526020019060010190808311611405575b50505050509050919050565b600a546001600160a01b0316331461144f5760405162461bcd60e51b815260040161070290612635565b600a546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015611488573d6000803e3d6000fd5b50565b600a546001600160a01b031633146114b55760405162461bcd60e51b815260040161070290612635565b6001600160a01b03919091166000908152600b60205260409020805460ff1916911515919091179055565b600081815260208190526040812090600482015460ff166003811115611508576115086123a3565b146115255760405162461bcd60e51b81526004016107029061260a565b8060030154421161156d5760405162461bcd60e51b8152602060048201526012602482015271141858dad95d081b9bdd08195e1c1a5c995960721b6044820152606401610702565b80546001600160a01b031633148061158f5750600a546001600160a01b031633145b6115cc5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152606401610702565b60048101805460ff1916600317905560018101541561162457805460018201546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015611622573d6000803e3d6000fd5b505b60005b6005820154811015610ba057600182600501828154811061164a5761164a6125b2565b90600052602060002090602091828204019190069054906101000a900460ff16600381111561167b5761167b6123a3565b0361174b57816007018181548110611695576116956125b2565b60009182526020909120015482546006840180546001600160a01b039384169363a9059cbb93169190859081106116ce576116ce6125b2565b6000918252602090912001546040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611725573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117499190612658565b505b80611755816125f1565b915050611627565b600a546001600160a01b031633146117875760405162461bcd60e51b815260040161070290612635565b6008939093556009805463ffffffff909416600160501b0263ffffffff60501b1961ffff909316600160401b0269ffffffffffffffffffff199095166001600160401b03909416939093179390931716179055565b60008083511180156117f05750600a835111155b61180c5760405162461bcd60e51b815260040161070290612584565b6000805b84518110156118525784818151811061182b5761182b6125b2565b60200260200101518261183e91906125de565b91508061184a816125f1565b915050611810565b506040516323b872dd60e01b81523360048201523060248201526044810182905285906001600160a01b038216906323b872dd906064016020604051808303816000875af11580156118a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cc9190612658565b6119105760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610702565b600085516001600160401b0381111561192b5761192b612005565b604051908082528060200260200182016040528015611954578160200160208202803683370190505b509050600086516001600160401b0381111561197257611972612005565b60405190808252806020026020018201604052801561199b578160200160208202803683370190505b50905060005b8751811015611a2b5760018382815181106119be576119be6125b2565b602002602001019060038111156119d7576119d76123a3565b908160038111156119ea576119ea6123a3565b8152505088828281518110611a0157611a016125b2565b6001600160a01b039092166020928302919091019091015280611a23816125f1565b9150506119a1565b506000611a8b85848a858c516001600160401b03811115611a4e57611a4e612005565b604051908082528060200260200182016040528015611a77578160200160208202803683370190505b508c611a84576000611a98565b6001611a98565b9998505050505050505050565b6004805460009182919082611aac836125f1565b90915550600081815260208190526040902080546001600160a01b03191633178155600181018a905542600282018190556005549293509091611aee916125de565b600382015560048101805460ff191690558751611b1490600583019060208b0190611eac565b508651611b2a90600683019060208a0190611f60565b508551611b409060078301906020890190611f9b565b508451611b569060088301906020880190611f60565b5060098101805485919060ff19166001836002811115611b7857611b786123a3565b02179055506001846002811115611b9157611b916123a3565b60098301805461ff001916919092146101000217905533600081815260036020908152604080832080546001810182559084529282902090920185905590518b815284917f1d999e6d0aed36ea80544d0939873285e49b1592ea68247f048e63ffc1b01171910160405180910390a350979650505050505050565b600042443384611c1d60014361268e565b6040805160208101969096528501939093526bffffffffffffffffffffffff19606092831b1691840191909152607483015240609482015260b40160408051601f19818403018152919052805160209091012092915050565b600083815260208190526040812060048101805460ff191660011790556005810154909103611ceb57816001600160a01b0316847f96733c83c38055dc9ad5960359e547536db97d423905a340cc18be0dabc9d79960006003604051611cdd9291906126a1565b60405180910390a350505050565b6005810154600090611cfd90856126be565b90506000826005018281548110611d1657611d166125b2565b90600052602060002090602091828204019190069054906101000a900460ff1690506000836006018381548110611d4f57611d4f6125b2565b60009182526020822001549150826003811115611d6e57611d6e6123a3565b03611daf576040516001600160a01b0386169082156108fc029083906000818181858888f19350505050158015611da9573d6000803e3d6000fd5b50611e5f565b6001826003811115611dc357611dc36123a3565b03611e5f57836007018381548110611ddd57611ddd6125b2565b60009182526020909120015460405163a9059cbb60e01b81526001600160a01b038781166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af1158015611e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5d9190612658565b505b846001600160a01b0316877f96733c83c38055dc9ad5960359e547536db97d423905a340cc18be0dabc9d7998385604051611e9b9291906126a1565b60405180910390a350505050505050565b82805482825590600052602060002090601f01602090048101928215611f505791602002820160005b83821115611f2157835183826101000a81548160ff02191690836003811115611f0057611f006123a3565b02179055509260200192600101602081600001049283019260010302611ed5565b8015611f4e5782816101000a81549060ff0219169055600101602081600001049283019260010302611f21565b505b50611f5c929150611ff0565b5090565b828054828255906000526020600020908101928215611f50579160200282015b82811115611f50578251825591602001919060010190611f80565b828054828255906000526020600020908101928215611f50579160200282015b82811115611f5057825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611fbb565b5b80821115611f5c5760008155600101611ff1565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561204357612043612005565b604052919050565b60006001600160401b0382111561206457612064612005565b5060051b60200190565b600082601f83011261207f57600080fd5b8135602061209461208f8361204b565b61201b565b82815260059290921b840181019181810190868411156120b357600080fd5b8286015b848110156120ce57803583529183019183016120b7565b509695505050505050565b600080604083850312156120ec57600080fd5b8235915060208301356001600160401b0381111561210957600080fd5b6121158582860161206e565b9150509250929050565b6000806040838503121561213257600080fd5b50508035926020909101359150565b60006020828403121561215357600080fd5b5035919050565b80356001600160a01b038116811461217157600080fd5b919050565b6000806040838503121561218957600080fd5b6121928361215a565b946020939093013593505050565b600082601f8301126121b157600080fd5b813560206121c161208f8361204b565b82815260059290921b840181019181810190868411156121e057600080fd5b8286015b848110156120ce576121f58161215a565b83529183019183016121e4565b6000806000806080858703121561221857600080fd5b84356001600160401b038082111561222f57600080fd5b818701915087601f83011261224357600080fd5b8135602061225361208f8361204b565b82815260059290921b8401810191818101908b84111561227257600080fd5b948201945b8386101561229e5785356004811061228f5760008081fd5b82529482019490820190612277565b985050880135925050808211156122b457600080fd5b6122c08883890161206e565b945060408701359150808211156122d657600080fd5b6122e2888389016121a0565b935060608701359150808211156122f857600080fd5b506123058782880161206e565b91505092959194509250565b60008060006060848603121561232657600080fd5b505081359360208301359350604090920135919050565b60006020828403121561234f57600080fd5b6123588261215a565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156123975783518352928401929184019160010161237b565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b60048110611488576114886123a3565b6001600160a01b038716815260208101869052604081018590526060810184905260c081016123f7846123b9565b608082019390935260a00152949350505050565b6001600160a01b0389168152602081018890526040810187905260608101869052610100810161243a866123b9565b85608083015260038510612450576124506123a3565b60a082019490945291151560c083015260e09091015295945050505050565b801515811461148857600080fd5b6000806040838503121561249057600080fd5b6124998361215a565b915060208301356124a98161246f565b809150509250929050565b600080600080608085870312156124ca57600080fd5b8435935060208501356001600160401b03811681146124e857600080fd5b9250604085013561ffff811681146124ff57600080fd5b9150606085013563ffffffff8116811461251857600080fd5b939692955090935050565b60008060006060848603121561253857600080fd5b6125418461215a565b925060208401356001600160401b0381111561255c57600080fd5b6125688682870161206e565b92505060408401356125798161246f565b809150509250925092565b602080825260149082015273125b9d985b1a59081c995dd85c990818dbdd5b9d60621b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561091e5761091e6125c8565b600060018201612603576126036125c8565b5060010190565b6020808252601190820152705061636b6574206e6f742061637469766560781b604082015260600190565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b60006020828403121561266a57600080fd5b81516123588161246f565b60006020828403121561268757600080fd5b5051919050565b8181038181111561091e5761091e6125c8565b828152604081016126b1836123b9565b8260208301529392505050565b6000826126db57634e487b7160e01b600052601260045260246000fd5b50069056fea2646970667358221220fe9afea67cb26d3ae3f0bf077499ce13c803992150d5e4c6724337e65519c06a64736f6c63430008140033",
  "devdoc": {
    "details": "A smart contract for creating random packets with various reward types Supports multiple randomness sources and packet types",
    "kind": "dev",
    "methods": {
      "cancelExpiredPacket(uint256)": {
        "details": "Cancel an expired packet and refund creator"
      },
      "commitForPacket(uint256,bytes32)": {
        "details": "Commit phase for commit-reveal randomness"
      },
      "createETHPacket(uint256,uint256[])": {
        "details": "Create a simple ETH packet with block hash randomness"
      },
      "createMixedPacket(uint8[],uint256[],address[],uint256[])": {
        "details": "Create a mixed packet with commit-reveal randomness"
      },
      "createTokenPacket(address,uint256[],bool)": {
        "details": "Create a token packet with VRF randomness"
      },
      "emergencyWithdraw()": {
        "details": "Emergency withdrawal function"
      },
      "fulfillRandomWords(uint256,uint256[])": {
        "details": "Chainlink VRF callback"
      },
      "getPacket(uint256)": {
        "details": "Get packet details"
      },
      "getUserPackets(address)": {
        "details": "Get user's packets"
      },
      "openPacket(uint256)": {
        "details": "Open a packet using block hash randomness"
      },
      "openPacketWithVRF(uint256)": {
        "details": "Open packet with VRF randomness"
      },
      "revealAndOpen(uint256,uint256,uint256)": {
        "details": "Reveal phase for commit-reveal randomness"
      },
      "setAuthorizedCreator(address,bool)": {
        "details": "Admin functions"
      }
    },
    "title": "RandomPacket",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 146,
        "contract": "contracts/RandomPacket.sol:RandomPacket",
        "label": "packets",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Packet)132_storage)"
      },
      {
        "astId": 151,
        "contract": "contracts/RandomPacket.sol:RandomPacket",
        "label": "commitRevealData",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(CommitRevealData)141_storage)"
      },
      {
        "astId": 155,
        "contract": "contracts/RandomPacket.sol:RandomPacket",
        "label": "vrfRequestToPacket",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 160,
        "contract": "contracts/RandomPacket.sol:RandomPacket",
        "label": "userPackets",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 163,
        "contract": "contracts/RandomPacket.sol:RandomPacket",
        "label": "nextPacketId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 166,
        "contract": "contracts/RandomPacket.sol:RandomPacket",
        "label": "defaultExpiryTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 169,
        "contract": "contracts/RandomPacket.sol:RandomPacket",
        "label": "commitRevealWindow",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 172,
        "contract": "contracts/RandomPacket.sol:RandomPacket",
        "label": "vrfCoordinator",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(VRFCoordinatorV2Interface)45"
      },
      {
        "astId": 174,
        "contract": "contracts/RandomPacket.sol:RandomPacket",
        "label": "keyHash",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 176,
        "contract": "contracts/RandomPacket.sol:RandomPacket",
        "label": "subscriptionId",
        "offset": 0,
        "slot": "9",
        "type": "t_uint64"
      },
      {
        "astId": 179,
        "contract": "contracts/RandomPacket.sol:RandomPacket",
        "label": "requestConfirmations",
        "offset": 8,
        "slot": "9",
        "type": "t_uint16"
      },
      {
        "astId": 182,
        "contract": "contracts/RandomPacket.sol:RandomPacket",
        "label": "callbackGasLimit",
        "offset": 10,
        "slot": "9",
        "type": "t_uint32"
      },
      {
        "astId": 184,
        "contract": "contracts/RandomPacket.sol:RandomPacket",
        "label": "owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 188,
        "contract": "contracts/RandomPacket.sol:RandomPacket",
        "label": "authorizedCreators",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_enum(RewardType)96)dyn_storage": {
        "base": "t_enum(RewardType)96",
        "encoding": "dynamic_array",
        "label": "enum RandomPacket.RewardType[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(VRFCoordinatorV2Interface)45": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(PacketStatus)91": {
        "encoding": "inplace",
        "label": "enum RandomPacket.PacketStatus",
        "numberOfBytes": "1"
      },
      "t_enum(RandomnessSource)100": {
        "encoding": "inplace",
        "label": "enum RandomPacket.RandomnessSource",
        "numberOfBytes": "1"
      },
      "t_enum(RewardType)96": {
        "encoding": "inplace",
        "label": "enum RandomPacket.RewardType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(CommitRevealData)141_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RandomPacket.CommitRevealData)",
        "numberOfBytes": "32",
        "value": "t_struct(CommitRevealData)141_storage"
      },
      "t_mapping(t_uint256,t_struct(Packet)132_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RandomPacket.Packet)",
        "numberOfBytes": "32",
        "value": "t_struct(Packet)132_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(CommitRevealData)141_storage": {
        "encoding": "inplace",
        "label": "struct RandomPacket.CommitRevealData",
        "members": [
          {
            "astId": 134,
            "contract": "contracts/RandomPacket.sol:RandomPacket",
            "label": "commitment",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 136,
            "contract": "contracts/RandomPacket.sol:RandomPacket",
            "label": "revealDeadline",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 138,
            "contract": "contracts/RandomPacket.sol:RandomPacket",
            "label": "revealed",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 140,
            "contract": "contracts/RandomPacket.sol:RandomPacket",
            "label": "nonce",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Packet)132_storage": {
        "encoding": "inplace",
        "label": "struct RandomPacket.Packet",
        "members": [
          {
            "astId": 102,
            "contract": "contracts/RandomPacket.sol:RandomPacket",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 104,
            "contract": "contracts/RandomPacket.sol:RandomPacket",
            "label": "totalValue",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 106,
            "contract": "contracts/RandomPacket.sol:RandomPacket",
            "label": "createdAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 108,
            "contract": "contracts/RandomPacket.sol:RandomPacket",
            "label": "expiresAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 111,
            "contract": "contracts/RandomPacket.sol:RandomPacket",
            "label": "status",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(PacketStatus)91"
          },
          {
            "astId": 115,
            "contract": "contracts/RandomPacket.sol:RandomPacket",
            "label": "rewardTypes",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_enum(RewardType)96)dyn_storage"
          },
          {
            "astId": 118,
            "contract": "contracts/RandomPacket.sol:RandomPacket",
            "label": "rewardAmounts",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 121,
            "contract": "contracts/RandomPacket.sol:RandomPacket",
            "label": "tokenAddresses",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 124,
            "contract": "contracts/RandomPacket.sol:RandomPacket",
            "label": "nftIds",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 127,
            "contract": "contracts/RandomPacket.sol:RandomPacket",
            "label": "randomnessSource",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(RandomnessSource)100"
          },
          {
            "astId": 129,
            "contract": "contracts/RandomPacket.sol:RandomPacket",
            "label": "requiresVRF",
            "offset": 1,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 131,
            "contract": "contracts/RandomPacket.sol:RandomPacket",
            "label": "vrfRequestId",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}