/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace DonationApp {
  export type DonationStruct = {
    donor: AddressLike;
    amount: BigNumberish;
    timestamp: BigNumberish;
    campaignId: BigNumberish;
    message: string;
  };

  export type DonationStructOutput = [
    donor: string,
    amount: bigint,
    timestamp: bigint,
    campaignId: bigint,
    message: string
  ] & {
    donor: string;
    amount: bigint;
    timestamp: bigint;
    campaignId: bigint;
    message: string;
  };
}

export interface DonationAppInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "campaignDonations"
      | "campaigns"
      | "cancelCampaign"
      | "createCampaign"
      | "donate"
      | "emergencyPause"
      | "getActiveCampaigns"
      | "getCampaign"
      | "getCampaignDonations"
      | "getCampaignProgress"
      | "getPlatformStats"
      | "getTimeLeft"
      | "getUserCampaigns"
      | "getUserDonations"
      | "isCampaignExpired"
      | "nextCampaignId"
      | "platformBalance"
      | "platformFee"
      | "platformOwner"
      | "totalCampaigns"
      | "totalDonationsAmount"
      | "totalDonationsCount"
      | "transferOwnership"
      | "updatePlatformFee"
      | "userCampaigns"
      | "userDonations"
      | "withdrawFunds"
      | "withdrawPlatformFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CampaignCancelled"
      | "CampaignCreated"
      | "CampaignGoalReached"
      | "CampaignWithdrawn"
      | "DonationMade"
      | "PlatformFeeUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "campaignDonations",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [string, string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveCampaigns",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignDonations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignProgress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeLeft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCampaigns",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDonations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCampaignExpired",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextCampaignId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDonationsAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDonationsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userCampaigns",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userDonations",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPlatformFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "campaignDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCampaignExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextCampaignId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDonationsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDonationsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPlatformFees",
    data: BytesLike
  ): Result;
}

export namespace CampaignCancelledEvent {
  export type InputTuple = [campaignId: BigNumberish, creator: AddressLike];
  export type OutputTuple = [campaignId: bigint, creator: string];
  export interface OutputObject {
    campaignId: bigint;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignCreatedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    creator: AddressLike,
    beneficiary: AddressLike,
    title: string,
    goal: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    creator: string,
    beneficiary: string,
    title: string,
    goal: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    creator: string;
    beneficiary: string;
    title: string;
    goal: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignGoalReachedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    totalRaised: BigNumberish
  ];
  export type OutputTuple = [campaignId: bigint, totalRaised: bigint];
  export interface OutputObject {
    campaignId: bigint;
    totalRaised: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignWithdrawnEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    beneficiary: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    beneficiary: string,
    amount: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    beneficiary: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DonationMadeEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    donor: AddressLike,
    amount: BigNumberish,
    message: string
  ];
  export type OutputTuple = [
    campaignId: bigint,
    donor: string,
    amount: bigint,
    message: string
  ];
  export interface OutputObject {
    campaignId: bigint;
    donor: string;
    amount: bigint;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeeUpdatedEvent {
  export type InputTuple = [newFee: BigNumberish];
  export type OutputTuple = [newFee: bigint];
  export interface OutputObject {
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DonationApp extends BaseContract {
  connect(runner?: ContractRunner | null): DonationApp;
  waitForDeployment(): Promise<this>;

  interface: DonationAppInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  campaignDonations: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, string] & {
        donor: string;
        amount: bigint;
        timestamp: bigint;
        campaignId: bigint;
        message: string;
      }
    ],
    "view"
  >;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        string,
        bigint
      ] & {
        title: string;
        description: string;
        beneficiary: string;
        goal: bigint;
        raised: bigint;
        deadline: bigint;
        active: boolean;
        goalReached: boolean;
        donorCount: bigint;
        creator: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  cancelCampaign: TypedContractMethod<
    [_campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createCampaign: TypedContractMethod<
    [
      _title: string,
      _description: string,
      _beneficiary: AddressLike,
      _goal: BigNumberish,
      _durationInDays: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  donate: TypedContractMethod<
    [_campaignId: BigNumberish, _message: string],
    [void],
    "payable"
  >;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  getActiveCampaigns: TypedContractMethod<
    [_start: BigNumberish, _limit: BigNumberish],
    [bigint[]],
    "view"
  >;

  getCampaign: TypedContractMethod<
    [_campaignId: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        string,
        bigint
      ] & {
        title: string;
        description: string;
        beneficiary: string;
        goal: bigint;
        raised: bigint;
        deadline: bigint;
        active: boolean;
        goalReached: boolean;
        donorCount: bigint;
        creator: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  getCampaignDonations: TypedContractMethod<
    [_campaignId: BigNumberish],
    [DonationApp.DonationStructOutput[]],
    "view"
  >;

  getCampaignProgress: TypedContractMethod<
    [_campaignId: BigNumberish],
    [bigint],
    "view"
  >;

  getPlatformStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _totalCampaigns: bigint;
        _totalDonationsAmount: bigint;
        _totalDonationsCount: bigint;
        _platformFee: bigint;
        _platformBalance: bigint;
      }
    ],
    "view"
  >;

  getTimeLeft: TypedContractMethod<
    [_campaignId: BigNumberish],
    [bigint],
    "view"
  >;

  getUserCampaigns: TypedContractMethod<
    [_user: AddressLike],
    [bigint[]],
    "view"
  >;

  getUserDonations: TypedContractMethod<
    [_user: AddressLike],
    [bigint[]],
    "view"
  >;

  isCampaignExpired: TypedContractMethod<
    [_campaignId: BigNumberish],
    [boolean],
    "view"
  >;

  nextCampaignId: TypedContractMethod<[], [bigint], "view">;

  platformBalance: TypedContractMethod<[], [bigint], "view">;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  platformOwner: TypedContractMethod<[], [string], "view">;

  totalCampaigns: TypedContractMethod<[], [bigint], "view">;

  totalDonationsAmount: TypedContractMethod<[], [bigint], "view">;

  totalDonationsCount: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePlatformFee: TypedContractMethod<
    [_newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  userCampaigns: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  userDonations: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdrawFunds: TypedContractMethod<
    [_campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawPlatformFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "campaignDonations"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, string] & {
        donor: string;
        amount: bigint;
        timestamp: bigint;
        campaignId: bigint;
        message: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        string,
        bigint
      ] & {
        title: string;
        description: string;
        beneficiary: string;
        goal: bigint;
        raised: bigint;
        deadline: bigint;
        active: boolean;
        goalReached: boolean;
        donorCount: bigint;
        creator: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelCampaign"
  ): TypedContractMethod<[_campaignId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [
      _title: string,
      _description: string,
      _beneficiary: AddressLike,
      _goal: BigNumberish,
      _durationInDays: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "donate"
  ): TypedContractMethod<
    [_campaignId: BigNumberish, _message: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveCampaigns"
  ): TypedContractMethod<
    [_start: BigNumberish, _limit: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCampaign"
  ): TypedContractMethod<
    [_campaignId: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        string,
        bigint
      ] & {
        title: string;
        description: string;
        beneficiary: string;
        goal: bigint;
        raised: bigint;
        deadline: bigint;
        active: boolean;
        goalReached: boolean;
        donorCount: bigint;
        creator: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCampaignDonations"
  ): TypedContractMethod<
    [_campaignId: BigNumberish],
    [DonationApp.DonationStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCampaignProgress"
  ): TypedContractMethod<[_campaignId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlatformStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _totalCampaigns: bigint;
        _totalDonationsAmount: bigint;
        _totalDonationsCount: bigint;
        _platformFee: bigint;
        _platformBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTimeLeft"
  ): TypedContractMethod<[_campaignId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserCampaigns"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserDonations"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isCampaignExpired"
  ): TypedContractMethod<[_campaignId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "nextCampaignId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalCampaigns"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDonationsAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDonationsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePlatformFee"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userCampaigns"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userDonations"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[_campaignId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawPlatformFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "CampaignCancelled"
  ): TypedContractEvent<
    CampaignCancelledEvent.InputTuple,
    CampaignCancelledEvent.OutputTuple,
    CampaignCancelledEvent.OutputObject
  >;
  getEvent(
    key: "CampaignCreated"
  ): TypedContractEvent<
    CampaignCreatedEvent.InputTuple,
    CampaignCreatedEvent.OutputTuple,
    CampaignCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CampaignGoalReached"
  ): TypedContractEvent<
    CampaignGoalReachedEvent.InputTuple,
    CampaignGoalReachedEvent.OutputTuple,
    CampaignGoalReachedEvent.OutputObject
  >;
  getEvent(
    key: "CampaignWithdrawn"
  ): TypedContractEvent<
    CampaignWithdrawnEvent.InputTuple,
    CampaignWithdrawnEvent.OutputTuple,
    CampaignWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "DonationMade"
  ): TypedContractEvent<
    DonationMadeEvent.InputTuple,
    DonationMadeEvent.OutputTuple,
    DonationMadeEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeeUpdated"
  ): TypedContractEvent<
    PlatformFeeUpdatedEvent.InputTuple,
    PlatformFeeUpdatedEvent.OutputTuple,
    PlatformFeeUpdatedEvent.OutputObject
  >;

  filters: {
    "CampaignCancelled(uint256,address)": TypedContractEvent<
      CampaignCancelledEvent.InputTuple,
      CampaignCancelledEvent.OutputTuple,
      CampaignCancelledEvent.OutputObject
    >;
    CampaignCancelled: TypedContractEvent<
      CampaignCancelledEvent.InputTuple,
      CampaignCancelledEvent.OutputTuple,
      CampaignCancelledEvent.OutputObject
    >;

    "CampaignCreated(uint256,address,address,string,uint256,uint256)": TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;
    CampaignCreated: TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;

    "CampaignGoalReached(uint256,uint256)": TypedContractEvent<
      CampaignGoalReachedEvent.InputTuple,
      CampaignGoalReachedEvent.OutputTuple,
      CampaignGoalReachedEvent.OutputObject
    >;
    CampaignGoalReached: TypedContractEvent<
      CampaignGoalReachedEvent.InputTuple,
      CampaignGoalReachedEvent.OutputTuple,
      CampaignGoalReachedEvent.OutputObject
    >;

    "CampaignWithdrawn(uint256,address,uint256)": TypedContractEvent<
      CampaignWithdrawnEvent.InputTuple,
      CampaignWithdrawnEvent.OutputTuple,
      CampaignWithdrawnEvent.OutputObject
    >;
    CampaignWithdrawn: TypedContractEvent<
      CampaignWithdrawnEvent.InputTuple,
      CampaignWithdrawnEvent.OutputTuple,
      CampaignWithdrawnEvent.OutputObject
    >;

    "DonationMade(uint256,address,uint256,string)": TypedContractEvent<
      DonationMadeEvent.InputTuple,
      DonationMadeEvent.OutputTuple,
      DonationMadeEvent.OutputObject
    >;
    DonationMade: TypedContractEvent<
      DonationMadeEvent.InputTuple,
      DonationMadeEvent.OutputTuple,
      DonationMadeEvent.OutputObject
    >;

    "PlatformFeeUpdated(uint256)": TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;
    PlatformFeeUpdated: TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;
  };
}
